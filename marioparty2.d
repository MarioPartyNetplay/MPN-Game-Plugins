module me.timz.n64.marioparty2;

import me.timz.n64.marioparty;
import me.timz.n64.plugin;
import std.algorithm;
import std.range;
import std.stdio;
import std.json;
import std.conv;
import std.random;
import std.stdio;
import std.string;
import std.traits;

class Config {
    Character[] characters = [Character.UNDEFINED, Character.UNDEFINED, Character.UNDEFINED, Character.UNDEFINED];
    bool alwaysDuel = false;
    bool lastPlaceDoubleRoll = false;
    bool teamMode = false;
    bool carryThreeItems = false;
    bool randomItemAndDuelMiniGames = false;
    bool cheaperAndBetterItems = false;
    int[Character] teams;
    bool randomBonus = false;
    string[BonusType] bonuses;
    float itemSpaceRatio = 0;
    float luckySpaceRatio = 0;
    //bool revealHiddenBlocksOnFinalTurn = false;
    int extraChanceSpaces = 0;
    float mapScrollSpeedMultiplier = 1.0;
    bool preventRepeatMiniGames = false;
    MiniGame[] blockedMiniGames;

    this() {
        bonuses = [
            BonusType.MINI_GAME: "Mini-Game",
            BonusType.COIN:      "Coin",
            BonusType.HAPPENING: "Happening",
            BonusType.RED:       "Unlucky",
            BonusType.BLUE:      "Blue",
            BonusType.CHANCE:    "Chance",
            BonusType.BOWSER:    "Bowser",
            BonusType.BATTLE:    "Battle",
            BonusType.ITEM:      "Item",
            BonusType.BANK:      "Banking",
            BonusType.LUCKY:     "Lucky"
        ];
    }
}

class PlayerState {
    Item[] items;
    int luckySpaceCount = 0;
}

class State {
    PlayerState[] players = [
        new PlayerState(),
        new PlayerState(),
        new PlayerState(),
        new PlayerState()
    ];
    ShuffleQueue!MiniGame[MiniGameType] miniGameQueue;
    ShuffleQueue!Board itemGameQueue;
    ShuffleQueue!Board duelGameQueue;
    Space.Type[] spaces;
}

union Chain {
    ubyte[8] _data;
    mixin Field!(4, Ptr!ushort, "spaces");
}

union Space {
    static enum Type : byte {
        UNDEFINED   = -1,
        START       =  0,
        BLUE        =  1,
        RED         =  2,
        INVIS_1     =  3,
        HAPPENING   =  4,
        CHANCE      =  5,
        ITEM        =  6,
        BANK        =  7,
        INVIS_2     =  8,
        BATTLE      =  9,
        UNKNOWN_1   = 10,
        UNKNOWN_2   = 11,
        BOWSER      = 12,
        ARROW       = 13,
        STAR        = 14,
        BLACK_STAR  = 15,
        TOAD        = 16,
        BABY_BOWSER = 17,
        // New Spaces
        LUCKY       = 18,
      //HIDDEN      = 19
    }

    ubyte[36] _data;
    mixin Field!(0x01, Type, "type");
    mixin Field!(0x20, Ptr!Event, "eventPtr");
}

union Event {
    ubyte[8] _data;
    mixin Field!(0x0, ushort, "activationType");
    mixin Field!(0x2, ushort, "executionType");
    mixin Field!(0x4, Ptr!Instruction, "routine");
}

union Player {
    ubyte[52] _data;
    mixin Field!(0x03, ubyte, "controller");
    mixin Field!(0x04, Character, "character");
    mixin Field!(0x07, ubyte, "flags");
    mixin Field!(0x08, ushort, "coins");
    mixin Field!(0x0E, ushort, "stars");
    mixin Field!(0x10, ushort, "chain");
    mixin Field!(0x12, ushort, "space");
    mixin Field!(0x19, Item, "item");
    mixin Field!(0x1B, PanelColor, "color");
    mixin Field!(0x28, ushort, "miniGameCoins");
    mixin Field!(0x2A, ushort, "maxCoins");
    mixin Field!(0x2C, ubyte, "happeningSpaces");
    mixin Field!(0x2D, ubyte, "redSpaces");
    mixin Field!(0x2E, ubyte, "blueSpaces");
    mixin Field!(0x2F, ubyte, "chanceSpaces");
    mixin Field!(0x30, ubyte, "bowserSpaces");
    mixin Field!(0x31, ubyte, "battleSpaces");
    mixin Field!(0x32, ubyte, "itemSpaces");
    mixin Field!(0x33, ubyte, "bankSpaces");
}

union Memory {
    ubyte[0x800000] ram;
    mixin Field!(0x80018B28, Instruction, "randomByteRoutine");
    mixin Field!(0x8004DE7C, Instruction, "openItemMenuRoutine");
    mixin Field!(0x80064200, Instruction, "duelRoutine");
    mixin Field!(0x80064478, Instruction, "duelCancelRoutine");
    mixin Field!(0x800CC000, Arr!(ubyte, 10), "itemPrices");
    mixin Field!(0x800DF645, ubyte, "numberOfRolls");
    mixin Field!(0x800DF6C0, Arr!(MiniGame, 5), "miniGameRoulette");
    mixin Field!(0x800DF718, Ptr!Instruction, "booRoutinePtr");
    mixin Field!(0x800DF724, Ptr!Instruction, "plunderChestRoutinePtr");
    mixin Field!(0x800E18A8, float, "mapX");
    mixin Field!(0x800E18AC, float, "mapY");
    mixin Field!(0x800E18D0, ushort, "spaceCount");
    mixin Field!(0x800E18D2, ushort, "chainCount");
    mixin Field!(0x800E18D4, Ptr!Space, "spaces");
    mixin Field!(0x800E18D8, Ptr!Chain, "chains");
    mixin Field!(0x800E18E0, Arr!(Address, 18), "spaceTypeTexturePointers");
    mixin Field!(0x800F851A, byte, "itemMenuOpen");
    mixin Field!(0x800F93AA, Board, "currentBoard");
    mixin Field!(0x800F93AE, ushort, "totalTurns");
    mixin Field!(0x800F93B0, ushort, "currentTurn");
    mixin Field!(0x800F93C6, ushort, "currentPlayerIndex");
    mixin Field!(0x800FA63C, Scene, "currentScene");
    mixin Field!(0x800FD2C0, Arr!(Player, 4), "players");
}

void mallocPerm(size_t size, void delegate(uint ptr) callback) {
    0x80040DA4.jal(cast(ushort)size, callback);
}

void freePerm(uint ptr, void delegate() callback) {
    0x80040DC8.jal(ptr, callback);
}

void mallocTemp(size_t size, void delegate(uint ptr) callback) {
    0x80040E74.jal(cast(ushort)size, callback);
}

void freeTemp(uint ptr, void delegate() callback) {
    0x80040E98.jal(ptr, callback);
}

class MarioParty2 : MarioParty!(Config, State, Memory) {
    BonusType[] bonus;
    Address[Scene] itemShopRoutines;
    Address[Scene] itemShopEvents;

    this(string name, string hash) {
        super(name, hash);
    }

    override bool lockTeams() const {
        return false;
    }

    override bool disableTeams() const {
        return false;
    }

    alias isBoardScene = typeof(super).isBoardScene;
    alias isScoreScene = typeof(super).isScoreScene;

    override bool isBoardScene(Scene scene) const {
        switch (scene) {
            case Scene.WESTERN_LAND_BOARD:
            case Scene.PIRATE_LAND_BOARD:
            case Scene.HORROR_LAND_BOARD:
            case Scene.SPACE_LAND_BOARD:
            case Scene.MYSTERY_LAND_BOARD:
            case Scene.BOWSER_LAND_BOARD:
                return true;
            default:
                return false;
        }
    }

    override bool isScoreScene(Scene scene) const {
        switch (scene) {
            case Scene.CHANCE_TIME:
            case Scene.FINISH_BOARD:
            case Scene.BOWSER_EVENT:
            case Scene.START_BOARD:
            case Scene.BATTLE_GAME_RESULTS:
            case Scene.MINI_GAME_RESULTS:
                return true;
            default:
                return isBoardScene(scene);
        }
    }

    short getSpaceIndex(Player p) {
        if (!p) return -1;
        if (!data.chains) return -1;
        auto spaces = data.chains[p.data.chain].spaces;
        if (!spaces) return -1;
        return spaces[p.data.space];
    }

    Space* getSpace(Player p) {
        auto i = getSpaceIndex(p);
        return i >= 0 ? &data.spaces[i] : null;
    }

    bool itemsFull(Player p) {
        if (config.carryThreeItems) {
            return p.state.items.length >= (p.isCPU ? 1 : 3);
        } else {
            return p.data.item != Item.NONE;
        }
    }

    static uint getBonusStat(Player player, BonusType type) {
        final switch (type) {
            case BonusType.MINI_GAME: return player.data.miniGameCoins;
            case BonusType.COIN:      return player.data.maxCoins;
            case BonusType.HAPPENING: return player.data.happeningSpaces;
            case BonusType.RED:       return player.data.redSpaces;
            case BonusType.BLUE:      return player.data.blueSpaces;
            case BonusType.CHANCE:    return player.data.chanceSpaces;
            case BonusType.BOWSER:    return player.data.bowserSpaces;
            case BonusType.BATTLE:    return player.data.battleSpaces;
            case BonusType.ITEM:      return player.data.itemSpaces;
            case BonusType.BANK:      return player.data.bankSpaces;
            case BonusType.LUCKY:     return player.state.luckySpaceCount;
        }
    }

    override void onStart() {
        super.onStart();

        if (config.luckySpaceRatio > 0) {
            immutable ITEM_WEIGHTS_EARLY = [
                Item.MUSHROOM:        22,
                Item.SKELETON_KEY:     9,
                Item.PLUNDER_CHEST:    7,
                Item.BOWSER_BOMB:      4,
                Item.DUELING_GLOVE:    7,
                Item.WARP_BLOCK:      15,
                Item.GOLDEN_MUSHROOM: 12,
                Item.BOO_BELL:         8,
                Item.BOWSER_SUIT:     10,
                Item.MAGIC_LAMP:       6
            ];

            immutable ITEM_WEIGHTS_MID = [
                Item.MUSHROOM:        18,
                Item.SKELETON_KEY:    10,
                Item.PLUNDER_CHEST:    9,
                Item.BOWSER_BOMB:      4,
                Item.DUELING_GLOVE:    9,
                Item.WARP_BLOCK:      10,
                Item.GOLDEN_MUSHROOM: 15,
                Item.BOO_BELL:         9,
                Item.BOWSER_SUIT:      9,
                Item.MAGIC_LAMP:       7
            ];

            immutable ITEM_WEIGHTS_END = [
                Item.MUSHROOM:        13,
                Item.SKELETON_KEY:     8,
                Item.PLUNDER_CHEST:    7,
                Item.BOWSER_BOMB:      4,
                Item.DUELING_GLOVE:   12,
                Item.WARP_BLOCK:       7,
                Item.GOLDEN_MUSHROOM: 18,
                Item.BOO_BELL:        13,
                Item.BOWSER_SUIT:      7,
                Item.MAGIC_LAMP:      11
            ];

            Ptr!Address luckySpaceTexturePtr = 0;
            //Ptr!Address goldSpaceTexturePtr = 0;

            0x80077AA8.onExecDone({ // Finish making temp heap
                luckySpaceTexturePtr = 0;
                //goldSpaceTexturePtr = 0;
                if (!isBoardScene()) return;

                mallocTemp(LUCKY_SPACE_TEXTURE.length + 0x10, (ptr) {
                    LUCKY_SPACE_TEXTURE.each!((i, b) { Ptr!ubyte(ptr + 0x10)[i] = b; });
                    luckySpaceTexturePtr = ptr;

                    /*
                    if (config.revealHiddenBlocksOnFinalTurn) {
                        mallocTemp(GOLD_SPACE_TEXTURE.length + 0x10, (ptr) {
                            GOLD_SPACE_TEXTURE.each!((i, b) { Ptr!ubyte(ptr + 0x10)[i] = b; });
                            goldSpaceTexturePtr = ptr;
                        });
                    }
                    */
                });
            });

            auto selectSpaceTexture = {
                if (!isBoardScene()) return;
                switch (gpr.s4) {
                    case Space.Type.LUCKY:  gpr.v0 = luckySpaceTexturePtr; break;
                    //case Space.Type.HIDDEN: gpr.v0 = goldSpaceTexturePtr;  break;
                    default:                                               break;
                }
            };
            0x800540B0.onExec({ // Force high res space textures on full map view
                if (!isBoardScene()) return;
                gpr.a0 = false;
            });
            0x80054460.onExecDone(selectSpaceTexture);
            0x8005448C.onExecDone(selectSpaceTexture);
            0x800546B4.onExecDone({
                if (!isBoardScene()) return;
                if (gpr.v0 != Space.Type.BLUE) return;
                if (gpr.s2 >= state.spaces.length) return;
                if (state.spaces[gpr.s2] == Space.Type.LUCKY) {
                    gpr.v0 = Space.Type.LUCKY;
                }
            });
            0x80054810.onExec({
                if (!isBoardScene()) return;
                gpr.v0 = (gpr.s4 <= Space.Type.max);
            });
            
            0x800557C8.onExecDone({ // Trigger Space
                if (!isBoardScene()) return;
                if (data.spaces[gpr.s0].type != Space.Type.BLUE) return;
                if (gpr.s3 != 3) return;
                if (gpr.s1) return; // Space already has an event defined
                if (gpr.s0 >= state.spaces.length) return;
                if (state.spaces[gpr.s0] != Space.Type.LUCKY) return;
                if (itemsFull(currentPlayer) || uniform!"[]"(0, 1, random)) return;

                0x800662F0.onExecOnce({ gpr.v0 = 1; }); // Skip giving coins
                gpr.ra.onExecOnce({ clearExecOnce(0x800662F0); });

                if (data.currentScene !in itemShopRoutines) {
                    auto result = searchMemory([
                        0x27BDFF90, 0xAFBF0068, 0xAFB50064, 0xAFB40060,
                        0xAFB3005C, 0xAFB20058, 0xAFB10054, 0xAFB00050,
                        0x3C148010, 0x269493A8, 0x0C01770F, 0x2404FFFF,
                        0x0040A821, 0x3C038010, 0x846393C6, 0x24020004,
                        0x10620169, 0x2404FFFF, 0x2405FFFF, 0x0C01775A
                    ]);
                    itemShopRoutines[data.currentScene] = (result.empty ? 0 : result.front);
                }
                Address routine = itemShopRoutines[data.currentScene];
                if (!routine) return;

                auto result = iota(data.spaceCount).map!(i => data.spaces[i].eventPtr).find!(e => e && (*e).routine == routine);
                if (result.empty) return;
                gpr.s1 = result.front;

                0x800557F0.onExecOnce({ gpr.v0 = 3; });

                routine.onExecOnce({
                    (routine + 0x048).onExecOnce({ jump(routine + 0x06C); }); // Skip look at shop animation
                    (routine + 0x10C).onExecOnce({ jump(routine + 0x404); }); // Skip message box
                    (routine + 0x414).onExecOnce({ jump(routine + 0x418); });
                    (routine + 0x414).onExecOnce({
                        Item item;
                        if (data.currentTurn <= data.totalTurns / 3) {
                            item = weighted(ITEM_WEIGHTS_EARLY, random);
                        } else if (data.currentTurn <= data.totalTurns * 2 / 3) {
                            item = weighted(ITEM_WEIGHTS_MID, random);
                        } else {
                            item = weighted(ITEM_WEIGHTS_END, random);
                        }
                        gpr.v0 = item; // Give random item
                        if (config.carryThreeItems) {
                            currentPlayer.state.items ~= item;
                        } else {
                            currentPlayer.data.item = item;
                        }
                    });
                    gpr.ra.onExecOnce({
                        clearExecOnce(routine + 0x048);
                        clearExecOnce(routine + 0x10C);
                        clearExecOnce(routine + 0x414);
                    });
                });
            });

            0x80066318.onExec({
                if (!isBoardScene()) return;
                auto i = getSpaceIndex(currentPlayer);
                if (data.spaces[i].type != Space.Type.BLUE) return;
                if (i >= state.spaces.length) return;
                if (state.spaces[i] != Space.Type.LUCKY) return;

                if (data.currentTurn <= data.totalTurns - 5) {
                    gpr.s0 = [7, 10, 12, 15, 20].choice(random);
                } else {
                    gpr.s0 =        [12, 15, 20].choice(random);
                }
            });
        }

        if (config.preventRepeatMiniGames || config.blockedMiniGames.length > 0) {
            data.currentScene.onWrite((ref Scene scene) {
                if (scene == Scene.START_BOARD) {
                    state.miniGameQueue.clear();
                    saveState();
                }
            });
            // Populate mini-game roulette
            0x8004AFA8.onExec({
                if (!isBoardScene()) return;
                0x8004AFEC.val!Instruction = NOP;
                0x8004B044.val!Instruction = NOP;
                0x8004B0F0.val!Instruction = NOP;
                0x8004B140.val!Instruction = NOP;
                if (gpr.s0 == 0) {
                    auto type = (cast(MiniGame)gpr.v0).type;
                    auto games = [EnumMembers!MiniGame].filter!(g => g.type == type).array;
                    auto choices = games.filter!(g => !config.blockedMiniGames.canFind(g));
                    auto game = state.miniGameQueue.require(type, ShuffleQueue!MiniGame(choices, random)).next(random);
                    auto altCount = (0x800CBD10 + gpr.s2).val!ubyte - 1;
                    auto roulette = game ~ games.filter!(g => g != game).array.randomShuffle(random).take(altCount);
                    roulette.randomShuffle(random).each!((i, e) => data.miniGameRoulette[i] = e);
                    0x8004A1FC.onExecOnce({ gpr.v0 = cast(uint)roulette.countUntil(game); });
                    saveState();
                }
                gpr.v0 = data.miniGameRoulette[gpr.s0];
            });
            // Prevent the mini-game roulette from jumping backward
            0x8004A4A8.onExec({ if (isBoardScene()) gpr.v0 = 1; });
        }

        if (config.teamMode) {
            data.duelRoutine.addr.onExec({
                if (!isBoardScene()) return;
                teammates(currentPlayer).each!((t) {
                    t.data.coins = 0;
                });
            });
            data.duelCancelRoutine.addr.onExec({
                if (!isBoardScene()) return;
                teammates(currentPlayer).each!((t) {
                    t.data.coins = currentPlayer.data.coins;
                });
            });
        }

        if (config.alwaysDuel) {
            0x800661AC.onExec({ if (isBoardScene()) gpr.v0 = 1; });
        }

        if (config.carryThreeItems) {
            data.currentScene.onWrite((ref Scene scene) { // Reset lucky spaces at start of game
                if (scene == Scene.START_BOARD) {
                    players.each!(p => p.state.items = []);
                    saveState();
                }
            });

            players.each!((p) {
                p.data.item.onWrite((ref Item item, Address pc) {
                    if (!isBoardScene()) return;
                    //info(pc.to!string(16), ": P", p.index, " Write");

                    if (data.itemMenuOpen) {
                        if (item == Item.NONE) {
                            if (!p.state.items.empty) {
                                p.state.items.popFront();
                            }
                        } else if (p.state.items.empty) {
                            p.state.items ~= item;
                        } else {
                            p.state.items[0] = item;
                        }
                    } else if (item != Item.NONE) {
                        p.state.items ~= item;
                    }

                    saveState();

                    item = item.NONE;
                });

                p.data.item.onRead((ref Item item, Address pc) {
                    if (!isBoardScene()) return;
                    //if (pc != 0x8005EEA8) info(pc.to!string(16), ": P", p.index, " Read");
                    if (item != Item.NONE) return;
                    if (p.state.items.empty) return;

                    if (pc == data.plunderChestRoutinePtr + 0x354) {
                        p.state.items.partialShuffle(1, random); // Randomize item being plundered
                    }

                    if (data.itemMenuOpen) {
                        item = p.state.items.front;
                        return;
                    }

                    if ((pc + 4).val!Instruction == 0x24020001) { // ADDIU V0, R0, 0x0001 (Checking if item is key (hopefully))
                        auto i = p.state.items.countUntil(Item.SKELETON_KEY);
                        if (i >= 0) {
                            item = p.data.item = Item.SKELETON_KEY;
                            p.state.items = p.state.items.remove(i);
                            saveState();
                            return;
                        }
                    }

                    if (p.state.items.canFind(Item.BOWSER_BOMB)) {
                        if (p.index != data.currentPlayerIndex || pc == 0x8004E984) { // pc == Check for Bowser Bomb
                            item = Item.BOWSER_BOMB;
                            return;
                        }
                    }

                    if (itemsFull(p) || pc == 0x8005EEA8) { // pc == Display Icon on Panel
                        item = p.state.items.front;
                    }
                });
            });

            data.itemMenuOpen.onWrite((ref byte isOpen) {
                if (!isBoardScene()) return;

                if (data.itemMenuOpen && !isOpen) {
                    players.each!((p) {
                        if (p.state.items.length <= 1) return;

                        p.state.items ~= p.state.items.front;
                        p.state.items.popFront();
                    });
                }

                saveState();
            });

            0x8005600C.onExec({ // Executes after declining to use key
                if (!isBoardScene()) return;

                players.each!((p) {
                    if (p.data.item == Item.NONE) return;

                    p.state.items ~= p.data.item; // Move key back
                    p.data.item = Item.NONE;
                    saveState();
                });
            });

            0x8006661C.onExec({ // Clear Bowser Bombs
                if (!isBoardScene()) return;

                bool found = false;
                players.each!((p) {
                    ptrdiff_t i;
                    while ((i = p.state.items.countUntil(Item.BOWSER_BOMB)) >= 0) {
                        p.state.items = p.state.items.remove(i);
                        saveState();

                        if (found) continue;
                        p.data.item = Item.BOWSER_BOMB;
                        found = true;
                    }
                });
            });
        }

        if (config.cheaperAndBetterItems) {
            // Decrease item price by 5 coins
            for (auto item = Item.MUSHROOM; item <= Item.MAGIC_LAMP; item++) {
                data.itemPrices[item].onRead((ref ubyte price) {
                    if (!isBoardScene()) return;
                    if (!price) return;

                    price -= 5;
                });
            }

            // Allow players with 5 or more coins to shop
            players.each!((p) {
                p.data.coins.onRead((ref ushort coins, Address pc) {
                    if (!isBoardScene()) return;

                    auto space = getSpace(currentPlayer);
                    if (!space || space.type != Space.Type.ARROW) return;

                    if (((pc + 4).val!Instruction & 0xFC00FFFF) == 0x2800000A) { // SLTI $T, $S, 10
                        coins += 5;
                    }
                });
            });

            // Update prices in dialog box
            0x8009DB18.onExecDone({
                if (!isBoardScene()) return;
                if (gpr.v0 < 16 || gpr.v0 >= 0x7FF) return;
                char[16] start;
                start.each!((i, ref c) => c = (gpr.a3 + cast(uint)i).val!char);
                if (start != "\x0B\x1A\x1A\x1A\x1AWhich \x0FItem") return;

                auto text = new char[gpr.v0];
                text.each!((i, ref c) => c = (gpr.a3 + cast(uint)i).val!char);
                text.replace("x 10", "x  5")
                    .replace("x 15", "x 10")
                    .replace("x 20", "x 15")
                    .replace("x 25", "x 20")
                    .replace("x 30", "x 25")
                    .each!((i, ref c) => (gpr.a3 + cast(uint)i).val!char = c);
            });

            // Make items available at all times
            data.currentTurn.onRead((ref ushort turn, Address pc) {
                if (!isBoardScene()) return;
                auto space = getSpace(currentPlayer);
                if (!space) return;

                if (space.type == Space.Type.ARROW) { // Item Shop
                    turn = cast(ushort)(data.totalTurns - 1);
                } else if (pc == 0x800663C8) {        // Item Space
                    turn = cast(ushort)(data.totalTurns - 1);
                }
            });
        }

        if (config.randomItemAndDuelMiniGames) {
            data.currentScene.onWrite((ref Scene scene) {
                if (scene == Scene.START_BOARD) {
                    state.itemGameQueue.clear();
                    state.duelGameQueue.clear();
                    saveState();
                }
            });

            data.currentBoard.onRead((ref Board board, Address pc) {
                if (!isBoardScene()) return;

                if (state.duelGameQueue.empty) state.duelGameQueue.initialize([EnumMembers!Board], random);
                if (state.itemGameQueue.empty) state.itemGameQueue.initialize([EnumMembers!Board], random);

                switch (pc) {
                    case 0x80064574: board = state.duelGameQueue.next(random); break;
                    case 0x80066428: board = state.itemGameQueue.next(random); break;
                    default: return;
                }

                saveState();
            });
        }

        if (config.randomBonus) {
            data.currentScene.onWrite((ref Scene scene) {
                if (scene != Scene.FINISH_BOARD) return;
                bonus = config.bonuses.keys.filter!(b => players.any!(p => getBonusStat(p, b) > 0)).array;
                if (bonus.length < 3) {
                    bonus = config.bonuses.keys;
                }
                if (bonus.length >= 3) {
                    bonus.randomShuffle(random);
                    info("Bonus Stars: ", bonus.take(3));
                }
            });

            0x80103F04.onExecDone({
                if (data.currentScene != Scene.FINISH_BOARD) return;
                if (bonus.length < 3) return;
                gpr.v1 = getBonusStat(players[gpr.s1], bonus[BonusType.MINI_GAME]);
            });

            0x80103F50.onExecDone({
                if (data.currentScene != Scene.FINISH_BOARD) return;
                if (bonus.length < 3) return;
                gpr.v0 = getBonusStat(players[gpr.s1], bonus[BonusType.MINI_GAME]);
            });

            0x80104314.onExecDone({
                if (data.currentScene != Scene.FINISH_BOARD) return;
                if (bonus.length < 3) return;
                gpr.v1 = getBonusStat(players[gpr.s1], bonus[BonusType.COIN]);
            });

            0x80104360.onExecDone({
                if (data.currentScene != Scene.FINISH_BOARD) return;
                if (bonus.length < 3) return;
                gpr.v0 = getBonusStat(players[gpr.s1], bonus[BonusType.COIN]);
            });

            0x80104724.onExecDone({
                if (data.currentScene != Scene.FINISH_BOARD) return;
                if (bonus.length < 3) return;
                gpr.v1 = getBonusStat(players[gpr.s1], bonus[BonusType.HAPPENING]);
            });

            0x80104770.onExecDone({
                if (data.currentScene != Scene.FINISH_BOARD) return;
                if (bonus.length < 3) return;
                gpr.v0 = getBonusStat(players[gpr.s1], bonus[BonusType.HAPPENING]);
            });

            void setText(string text) {
                text = formatText(text ~ "<END><NUL>");
                mallocTemp(text.length, (ptr) {
                    text.each!((i, c) { Ptr!char(ptr)[i] = c; });
                    gpr.a1 = ptr;
                });
            }

            0x800890CC.onExecDone({
                if (data.currentScene != Scene.FINISH_BOARD) return;
                if (bonus.length < 3) return;

                switch (gpr.a1) {
                    case 0x5F8: setText("First, the <" ~ getColor(bonus[BonusType.MINI_GAME]) ~ ">" ~ config.bonuses[bonus[BonusType.MINI_GAME]] ~ " Star<RESET>\naward! This award goes to\nthe player who " ~ getDescription(bonus[BonusType.MINI_GAME])  ~ "."); break;
                    case 0x5F9: setText("The <" ~ getColor(bonus[BonusType.MINI_GAME]) ~ ">" ~ config.bonuses[bonus[BonusType.MINI_GAME]] ~ " Star<RESET>\ngoes to <1>!"); break;
                    case 0x5FA: setText("It's a tie! <YELLOW>Stars<RESET> go\nto two players...\n<1> and <2>!"); break;
                    case 0x5FB: setText("It's a three-way tie!\n<YELLOW>Stars<RESET> go to three\nplayers...<1>,\n<2> and <3>!"); break;
                    case 0x5FC: setText("It's a four-way tie!!!\nAll four players are\n<" ~ getColor(bonus[BonusType.MINI_GAME]) ~ ">" ~ config.bonuses[bonus[BonusType.MINI_GAME]] ~ " Stars<RESET>, so no\n<YELLOW>Stars<RESET> will be awarded."); break;
                    case 0x5FD: setText("Next, the <" ~ getColor(bonus[BonusType.COIN]) ~ ">" ~ config.bonuses[bonus[BonusType.COIN]] ~ " Star<RESET>\naward! This award goes to\nthe player who " ~ getDescription(bonus[BonusType.COIN])  ~ "."); break;
                    case 0x5FE: setText("The <" ~ getColor(bonus[BonusType.COIN]) ~ ">" ~ config.bonuses[bonus[BonusType.COIN]] ~ " Star<RESET>\ngoes to <1>!"); break;
                    case 0x5FF: setText("It's a tie! <YELLOW>Stars<RESET> go\nto two players...\n<1> and <2>!"); break;
                    case 0x600: setText("It's a three-way tie!\n<YELLOW>Stars<RESET> go to three\nplayers...<1>,\n<2> and <3>!"); break;
                    case 0x601: setText("It's a four-way tie!!!\nAll four players are\n<" ~ getColor(bonus[BonusType.COIN]) ~ ">" ~ config.bonuses[bonus[BonusType.COIN]] ~ " Stars<RESET>, so no\n<YELLOW>Stars<RESET> will be awarded."); break;
                    case 0x602: setText("Finally, the <" ~ getColor(bonus[BonusType.HAPPENING]) ~ ">" ~ config.bonuses[bonus[BonusType.HAPPENING]] ~ " Star<RESET>\naward! This award goes to\nthe player who " ~ getDescription(bonus[BonusType.HAPPENING])  ~ "."); break;
                    case 0x603: setText("The <" ~ getColor(bonus[BonusType.HAPPENING]) ~ ">" ~ config.bonuses[bonus[BonusType.HAPPENING]] ~ " Star<RESET>\ngoes to <1>!"); break;
                    case 0x604: setText("It's a tie! <YELLOW>Stars<RESET> go\nto two players...\n<1> and <2>!"); break;
                    case 0x605: setText("It's a three-way tie!\n<YELLOW>Stars<RESET> go to three\nplayers...<1>,\n<2> and <3>!"); break;
                    case 0x606: setText("It's a four-way tie!!!\nAll four players are\n<" ~ getColor(bonus[BonusType.HAPPENING]) ~ ">" ~ config.bonuses[bonus[BonusType.HAPPENING]] ~ " Stars<RESET>, so no\n<YELLOW>Stars<RESET> will be awarded."); break;
                    default:
                }
            });
        }

        if (config.itemSpaceRatio > 0 || config.luckySpaceRatio > 0 || config.extraChanceSpaces > 0) {
            data.currentScene.onWrite((ref Scene scene) {
                if (scene == Scene.START_BOARD) {
                    state.spaces = [];
                    state.players.each!(p => p.luckySpaceCount = 0);
                    saveState();
                }
            });

            0x800542FC.onExec({
                if (!isBoardScene()) return;

                if (data.spaceCount > state.spaces.length) {
                    state.spaces.length = data.spaceCount;
                    auto blueSpaces = iota(data.spaceCount).filter!(i => data.spaces[i].type == Space.Type.BLUE).array;

                    long chanceCount = config.extraChanceSpaces
                                     - blueSpaces.count!(i => state.spaces[i] == Space.Type.CHANCE);
                    if (chanceCount > 0) {
                        blueSpaces.filter!(i => state.spaces[i] == Space.Type.UNDEFINED)
                                  .array.randomShuffle(random)[0..min(chanceCount, $)]
                                  .each!(i => data.spaces[i].type = state.spaces[i] = Space.Type.CHANCE);
                    }

                    long itemCount = roundTo!long(blueSpaces.length * min(config.itemSpaceRatio, 1.0))
                                   - blueSpaces.count!(i => state.spaces[i] == Space.Type.ITEM);
                    if (itemCount > 0) {
                        blueSpaces.filter!(i => state.spaces[i] == Space.Type.UNDEFINED)
                                  .array.randomShuffle(random)[0..min(itemCount, $)]
                                  .each!(i => data.spaces[i].type = state.spaces[i] = Space.Type.ITEM);
                    }

                    long luckyCount = roundTo!long(blueSpaces.length * min(config.luckySpaceRatio, 1.0))
                                    - blueSpaces.count!(i => state.spaces[i] == Space.Type.LUCKY);
                    if (luckyCount > 0) {
                        blueSpaces.filter!(i => state.spaces[i] == Space.Type.UNDEFINED)
                                  .array.randomShuffle(random)[0..min(luckyCount, $)]
                                  .each!(i => state.spaces[i] = Space.Type.LUCKY);
                    }

                    saveState();
                }
            });

            0x80054940.onExec({
                if (!isBoardScene()) return;
                if (gpr.s2 >= state.spaces.length) return;
                if (state.spaces[gpr.s2] == Space.Type.UNDEFINED) return;
                if (gpr.v0 == Space.Type.STAR || gpr.v0 == Space.Type.BLACK_STAR) return;
                if (state.spaces[gpr.s2] > Space.Type.BABY_BOWSER) return;

                gpr.v0 = state.spaces[gpr.s2];
            });

            0x80065AA4.onExec({ // Increment lucky space count
                if (!isBoardScene()) return;
                auto i = getSpaceIndex(currentPlayer);
                if (data.spaces[i].type != Space.Type.BLUE) return;
                if (i >= state.spaces.length) return;
                if (state.spaces[i] != Space.Type.LUCKY) return;

                gpr.v0--;
                currentPlayer.state.luckySpaceCount++;

                saveState();
            });

            data.currentScene.onWrite((ref Scene scene) {
                if (scene != Scene.FINAL_RESULTS) return;
                0x801071EC.onExecOnce({
                    info("Lucky Spaces:");
                    players.dup.sort!((p, q) => p.data.coins > q.data.coins, SwapStrategy.stable)
                               .sort!((p, q) => p.data.stars > q.data.stars, SwapStrategy.stable)
                               .each!((p) {
                        info(format("    %-8s %2d", p.data.character.to!string ~ ":", p.state.luckySpaceCount));
                    });
                });
            });
        }

        if (config.mapScrollSpeedMultiplier != 1.0) {
            0x80067944.onExec({
                if (!isBoardScene()) return;

                fpr.f12 *= config.mapScrollSpeedMultiplier;
            });
        }
    }
}

extern (C) {
    string getName() {
        return "Mario Party 2";
    }

    int startup() {
        pluginFactory = (name, hash) => new MarioParty2(name, hash);

        return 0;
    }
}

enum BonusType {
    MINI_GAME,
    COIN,
    HAPPENING,
    RED,
    BLUE,
    CHANCE,
    BOWSER,
    BATTLE,
    ITEM,
    BANK,
    LUCKY
}

string getColor(BonusType type) {
    final switch (type) {
        case BonusType.MINI_GAME: return "CYAN";
        case BonusType.COIN:      return "YELLOW";
        case BonusType.HAPPENING: return "GREEN";
        case BonusType.RED:       return "RED";
        case BonusType.BLUE:      return "BLUE";
        case BonusType.CHANCE:    return "GREEN";
        case BonusType.BOWSER:    return "RED";
        case BonusType.BATTLE:    return "GREEN";
        case BonusType.ITEM:      return "GREEN";
        case BonusType.BANK:      return "YELLOW";
        case BonusType.LUCKY:     return "BLUE";
    }
}

string getDescription(BonusType type) {
    final switch (type) {
        case BonusType.MINI_GAME: return "collected the\nmost <YELLOW>Coins<RESET> in Mini-Games";
        case BonusType.COIN:      return "held the\nmost <YELLOW>Coins<RESET> at one time";
        case BonusType.HAPPENING: return "landed on\nthe most <GREEN>? Spaces<RESET>";
        case BonusType.RED:       return "landed on\nthe most <RED>Red Spaces<RESET>";
        case BonusType.BLUE:      return "landed on\nthe most <BLUE>Blue Spaces<RESET>";
        case BonusType.CHANCE:    return "landed on\nthe most <GREEN>! Spaces<RESET>";
        case BonusType.BOWSER:    return "landed on\nthe most <RED>Bowser Spaces<RESET>";
        case BonusType.BATTLE:    return "landed on\nthe most <GREEN>Battle Spaces<RESET>";
        case BonusType.ITEM:      return "landed on\nthe most <GREEN>Item Spaces<RESET>";
        case BonusType.BANK:      return "landed on\nthe most <GREEN>Bank Spaces<RESET>";
        case BonusType.LUCKY:     return "landed on\nthe most <BLUE>Lucky Spaces<RESET>";
    }
}

enum Board : ushort {
    WESTERN = 0,
    PIRATE  = 1,
    HORROR  = 2,
    SPACE   = 3,
    MYSTERY = 4,
    BOWSER  = 5
}

enum Item : byte {
    NONE            = -1,
    MUSHROOM        =  0,
    SKELETON_KEY    =  1,
    PLUNDER_CHEST   =  2,
    BOWSER_BOMB     =  3,
    DUELING_GLOVE   =  4,
    WARP_BLOCK      =  5,
    GOLDEN_MUSHROOM =  6,
    BOO_BELL        =  7,
    BOWSER_SUIT     =  8,
    MAGIC_LAMP      =  9
}

enum MiniGameType {
    ONE_V_THREE,
    TWO_V_TWO,
    FOUR_PLAYER,
    BATTLE,
    DUEL,
    ITEM,
    SPECIAL
}

enum MiniGame : ubyte {
    BOWSER_SLOTS         =  1,
    ROLL_OUT_THE_BARRELS =  2,
    COFFIN_CONGESTION    =  3,
    HAMMER_SLAMMER       =  4,
    GIVE_ME_A_BRAKE      =  5,
    MALLET_GO_ROUND      =  6,
    GRAB_BAG             =  7,
    BUMPER_BALLOON_CARS  =  8,
    RAKE_EM_IN           =  9,
    DAY_AT_THE_RACES     = 11,
    FACE_LIFT            = 12,
    CRAZY_CUTTERS        = 13,
    HOT_BOB_OMB          = 14,
    BOWL_OVER            = 15,
    RAINBOW_RUN          = 16,
    CRANE_GAME           = 17,
    MOVE_TO_THE_MUSIC    = 18,
    BOB_OMB_BARRAGE      = 19,
    LOOK_AWAY            = 20,
    SHOCK_DROP_OR_ROLL   = 21,
    LIGHTS_OUT           = 22,
    FILET_RELAY          = 23,
    ARCHER_IVAL          = 24,
    TOAD_BANDSTAND       = 26,
    BOBSLED_RUN          = 27,
    HANDCAR_HAVOC        = 28,
    BALLOON_BURST        = 30,
    SKY_PILOTS           = 31,
    SPEED_HOCKEY         = 32,
    CAKE_FACTORY         = 33,
    DUNGEON_DASH         = 35,
    MAGNET_CARTA         = 36,
    LAVA_TILE_ISLE       = 37,
    HOT_ROPE_JUMP        = 38,
    SHELL_SHOCKED        = 39,
    TOAD_IN_THE_BOX      = 40,
    MECHA_MARATHON       = 41,
    ROLL_CALL            = 42,
    ABANDON_SHIP         = 43,
    PLATFORM_PERIL       = 44,
    TOTEM_POLE_POUND     = 45,
    BUMPER_BALLS         = 46,
    BOMBS_AWAY           = 48,
    TIPSY_TOURNEY        = 49,
    HONEYCOMB_HAVOC      = 50,
    HEXAGON_HEAT         = 51,
    SKATEBOARD_SCAMPER   = 52,
    SLOT_CAR_DERBY       = 53,
    SHY_GUY_SAYS         = 54,
    SNEAK_N_SNORE        = 55,
    DRIVERS_ED           = 57,
    CHANCE_TIME          = 58,
    QUICK_DRAW_CORKS     = 59,
    SABER_SLASHES        = 60,
    MUSHROOM_BREW        = 61,
    TIME_BOMB            = 62,
    PSYCHIC_SAFARI       = 63,
    ROCK_PAPER_MARIO     = 64,
    BOWSERS_BIG_BLAST    = 65,
    LOONEY_LUMBERJACKS   = 66,
    TORPEDO_TARGETS      = 67,
    DESTRUCTION_DUET     = 68,
    DIZZY_DANCING        = 69,
    TILE_DRIVER          = 70,
    QUICKSAND_CACHE      = 71,
    DEEP_SEA_SALVAGE     = 72
}

MiniGameType type(MiniGame game) {
    switch (game) {
        case MiniGame.LAVA_TILE_ISLE:
        case MiniGame.HOT_ROPE_JUMP:
        case MiniGame.SHELL_SHOCKED:
        case MiniGame.TOAD_IN_THE_BOX:
        case MiniGame.MECHA_MARATHON:
        case MiniGame.ROLL_CALL:
        case MiniGame.ABANDON_SHIP:
        case MiniGame.PLATFORM_PERIL:
        case MiniGame.TOTEM_POLE_POUND:
        case MiniGame.BUMPER_BALLS:
        case MiniGame.BOMBS_AWAY:
        case MiniGame.TIPSY_TOURNEY:
        case MiniGame.HONEYCOMB_HAVOC:
        case MiniGame.HEXAGON_HEAT:
        case MiniGame.SKATEBOARD_SCAMPER:
        case MiniGame.SLOT_CAR_DERBY:
        case MiniGame.SHY_GUY_SAYS:
        case MiniGame.SNEAK_N_SNORE:
        case MiniGame.DIZZY_DANCING:
        case MiniGame.TILE_DRIVER:
        case MiniGame.DEEP_SEA_SALVAGE:
            return MiniGameType.FOUR_PLAYER;

        case MiniGame.BOWL_OVER:
        case MiniGame.RAINBOW_RUN:
        case MiniGame.CRANE_GAME:
        case MiniGame.MOVE_TO_THE_MUSIC:
        case MiniGame.BOB_OMB_BARRAGE:
        case MiniGame.LOOK_AWAY:
        case MiniGame.SHOCK_DROP_OR_ROLL:
        case MiniGame.LIGHTS_OUT:
        case MiniGame.FILET_RELAY:
        case MiniGame.ARCHER_IVAL:
        case MiniGame.QUICKSAND_CACHE:
            return MiniGameType.ONE_V_THREE;

        case MiniGame.TOAD_BANDSTAND:
        case MiniGame.BOBSLED_RUN:
        case MiniGame.HANDCAR_HAVOC:
        case MiniGame.BALLOON_BURST:
        case MiniGame.SKY_PILOTS:
        case MiniGame.SPEED_HOCKEY:
        case MiniGame.CAKE_FACTORY:
        case MiniGame.DUNGEON_DASH:
        case MiniGame.MAGNET_CARTA:
        case MiniGame.LOONEY_LUMBERJACKS:
        case MiniGame.TORPEDO_TARGETS:
        case MiniGame.DESTRUCTION_DUET:
            return MiniGameType.TWO_V_TWO;

        case MiniGame.GRAB_BAG:
        case MiniGame.BUMPER_BALLOON_CARS:
        case MiniGame.RAKE_EM_IN:
        case MiniGame.DAY_AT_THE_RACES:
        case MiniGame.HOT_BOB_OMB:
        case MiniGame.FACE_LIFT:
        case MiniGame.CRAZY_CUTTERS:
        case MiniGame.BOWSERS_BIG_BLAST:
            return MiniGameType.BATTLE;

        case MiniGame.BOWSER_SLOTS:
        case MiniGame.ROLL_OUT_THE_BARRELS:
        case MiniGame.COFFIN_CONGESTION:
        case MiniGame.HAMMER_SLAMMER:
        case MiniGame.GIVE_ME_A_BRAKE:
        case MiniGame.MALLET_GO_ROUND:
            return MiniGameType.ITEM;

        case MiniGame.QUICK_DRAW_CORKS:
        case MiniGame.SABER_SLASHES:
        case MiniGame.MUSHROOM_BREW:
        case MiniGame.TIME_BOMB:
        case MiniGame.PSYCHIC_SAFARI:
        case MiniGame.ROCK_PAPER_MARIO:
            return MiniGameType.DUEL;

        default:
            return MiniGameType.SPECIAL;
    }
}

enum Scene : uint {
    BOOT                 =   0,
    BOWSER_SLOTS         =   1,
    ROLL_OUT_THE_BARRELS =   2,
    COFFIN_CONGESTION    =   3,
    HAMMER_SLAMMER       =   4,
    GIVE_ME_A_BRAKE      =   5,
    MALLET_GO_ROUND      =   6,
    GRAB_BAG             =   7,
    LAVA_TILE_ISLE       =   8,
    BUMPER_BALLOON_CARS  =   9,
    RAKE_EM_IN           =  10,
    DAY_AT_THE_RACES     =  11,
    HOT_ROPE_JUMP        =  12,
    HOT_BOB_OMB          =  13,
    BOWL_OVER            =  14,
    RAINBOW_RUN          =  15,
    CRANE_GAME           =  16,
    MOVE_TO_THE_MUSIC    =  17,
    BOB_OMB_BARRAGE      =  18,
    LOOK_AWAY            =  19,
    SHOCK_DROP_OR_ROLL   =  20,
    LIGHTS_OUT           =  21,
    FILET_RELAY          =  22,
    ARCHER_IVAL          =  23,
    TOAD_BANDSTAND       =  24,
    BOBSLED_RUN          =  25,
    HANDCAR_HAVOC        =  26,
    BALLOON_BURST        =  27,
    SKY_PILOTS           =  28,
    SPEED_HOCKEY         =  29,
    CAKE_FACTORY         =  30,
    DUNGEON_DASH         =  31,
    MAGNET_CARTA         =  32,
    FACE_LIFT            =  33,
    SHELL_SHOCKED        =  34,
    CRAZY_CUTTERS        =  35,
    TOAD_IN_THE_BOX      =  36,
    MECHA_MARATHON       =  37,
    ROLL_CALL            =  38,
    ABANDON_SHIP         =  39,
    PLATFORM_PERIL       =  40,
    TOTEM_POLE_POUND     =  41,
    BUMPER_BALLS         =  42,
    BOMBS_AWAY           =  43,
    TIPSY_TOURNEY        =  44,
    HONEYCOMB_HAVOC      =  45,
    HEXAGON_HEAT         =  46,
    SKATEBOARD_SCAMPER   =  47,
    SLOT_CAR_DERBY       =  48,
    SHY_GUY_SAYS         =  49,
    SNEAK_N_SNORE        =  50,
    DRIVERS_ED           =  51,
    CHANCE_TIME          =  52,
    LOONEY_LUMBERJACKS   =  53,
    DIZZY_DANCING        =  54,
    TILE_DRIVER          =  55,
    QUICKSAND_CACHE      =  56,
    BOWSERS_BIG_BLAST    =  57,
    TORPEDO_TARGETS      =  58,
    DESTRUCTION_DUET     =  59,
    DEEP_SEA_SALVAGE     =  60,
    TRANSITION           =  61,
    WESTERN_LAND_BOARD   =  62,
    PIRATE_LAND_BOARD    =  65,
    HORROR_LAND_BOARD    =  67,
    SPACE_LAND_BOARD     =  69,
    MYSTERY_LAND_BOARD   =  71,
    BOWSER_LAND_BOARD    =  73,
    FINAL_RESULTS        =  81,
    FINISH_BOARD         =  82,
    BOWSER_EVENT         =  83,
    START_BOARD          =  85,
    OPENING_CREDITS      =  87,
    GAME_SETUP           =  88,
    MAIN_MENU            =  91,
    MINI_GAME_LAND       =  92,
    MINI_GAME_PARK       =  93,
    MINI_GAME_RULES_2    =  95,
    MINI_GAME_RULES      =  96,
    TITLE_SCREEN         =  98,
    BATTLE_GAME_RESULTS  = 111,
    MINI_GAME_RESULTS    = 112
}

immutable ubyte[] LUCKY_SPACE_TEXTURE = [
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x31, 0x31, 0x3d, 0x08, 0x2d, 0x2d, 0x4b, 0x21,
    0x29, 0x29, 0x5a, 0x4a, 0x27, 0x27, 0x64, 0x52, 0x24, 0x24, 0x6f, 0x5a, 0x23, 0x23, 0x75, 0x63,
    0x22, 0x22, 0x75, 0x63, 0x25, 0x25, 0x6d, 0x5a, 0x27, 0x27, 0x65, 0x52, 0x2a, 0x2a, 0x59, 0x42,
    0x2d, 0x2d, 0x4d, 0x29, 0x31, 0x31, 0x3d, 0x08, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x2f, 0x2f, 0x44, 0x08, 0x29, 0x29, 0x59, 0x29, 0x23, 0x23, 0x72, 0x42, 0x23, 0x23, 0x75, 0x5a,
    0x22, 0x22, 0x79, 0x8c, 0x22, 0x22, 0x79, 0xa5, 0x22, 0x22, 0x75, 0xb5, 0x22, 0x22, 0x77, 0xc6,
    0x22, 0x22, 0x76, 0xc6, 0x21, 0x21, 0x79, 0xb5, 0x21, 0x21, 0x79, 0x9c, 0x22, 0x22, 0x76, 0x84,
    0x22, 0x22, 0x75, 0x63, 0x23, 0x23, 0x70, 0x42, 0x2a, 0x2a, 0x58, 0x29, 0x2f, 0x2f, 0x43, 0x08,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x31, 0x31, 0x3c, 0x08, 0x2a, 0x2a, 0x56, 0x21,
    0x23, 0x23, 0x73, 0x4a, 0x21, 0x21, 0x79, 0x63, 0x20, 0x2e, 0x80, 0x8c, 0x14, 0x62, 0xaf, 0xa5,
    0x0a, 0x92, 0xd7, 0xbd, 0x04, 0xbc, 0xef, 0xc6, 0x01, 0xdf, 0xfb, 0xce, 0x00, 0xf6, 0xfe, 0xd6,
    0x00, 0xf6, 0xfe, 0xd6, 0x01, 0xdf, 0xfb, 0xce, 0x04, 0xbc, 0xef, 0xc6, 0x0a, 0x92, 0xd7, 0xbd,
    0x14, 0x62, 0xaf, 0xa5, 0x20, 0x2e, 0x7e, 0x84, 0x22, 0x22, 0x76, 0x63, 0x23, 0x23, 0x74, 0x42,
    0x2a, 0x2a, 0x56, 0x21, 0x31, 0x31, 0x3c, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x2f, 0x2f, 0x45, 0x10, 0x27, 0x27, 0x66, 0x39, 0x23, 0x23, 0x75, 0x5a,
    0x1f, 0x33, 0x80, 0x8c, 0x0e, 0x7a, 0xc4, 0xa5, 0x03, 0xc3, 0xf1, 0xb5, 0x00, 0xff, 0xff, 0xc6,
    0x00, 0xff, 0xff, 0xd6, 0x00, 0xff, 0xff, 0xde, 0x00, 0xff, 0xff, 0xde, 0x00, 0xff, 0xff, 0xe7,
    0x00, 0xff, 0xff, 0xe7, 0x00, 0xff, 0xff, 0xde, 0x00, 0xff, 0xff, 0xde, 0x00, 0xff, 0xff, 0xce,
    0x00, 0xff, 0xff, 0xc6, 0x03, 0xc3, 0xf1, 0xad, 0x0e, 0x7a, 0xc4, 0x9c, 0x1f, 0x33, 0x83, 0x84,
    0x22, 0x22, 0x77, 0x52, 0x26, 0x26, 0x68, 0x31, 0x2f, 0x2f, 0x45, 0x08, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x2e, 0x2e, 0x47, 0x10, 0x24, 0x24, 0x6f, 0x42, 0x21, 0x21, 0x79, 0x6b, 0x15, 0x5c, 0xab, 0x9c,
    0x05, 0xb4, 0xeb, 0xb5, 0x00, 0xff, 0xff, 0xc6, 0x00, 0xff, 0xff, 0xd6, 0x00, 0xc7, 0xff, 0xe7,
    0x00, 0x8a, 0xff, 0xef, 0x00, 0x5b, 0xff, 0xef, 0x00, 0x39, 0xff, 0xf7, 0x00, 0x25, 0xff, 0xf7,
    0x00, 0x2d, 0xff, 0xf7, 0x00, 0x4b, 0xff, 0xef, 0x00, 0x74, 0xff, 0xef, 0x00, 0xa3, 0xff, 0xe7,
    0x00, 0xd5, 0xff, 0xde, 0x00, 0xff, 0xff, 0xd6, 0x00, 0xff, 0xff, 0xc6, 0x05, 0xb4, 0xeb, 0xad,
    0x15, 0x5c, 0xaa, 0x94, 0x22, 0x22, 0x76, 0x6b, 0x24, 0x24, 0x70, 0x39, 0x2e, 0x2e, 0x48, 0x10,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x2f, 0x2f, 0x45, 0x10,
    0x24, 0x24, 0x72, 0x42, 0x21, 0x21, 0x79, 0x73, 0x10, 0x70, 0xc1, 0xa5, 0x02, 0xd9, 0xf9, 0xbd,
    0x00, 0xff, 0xff, 0xd6, 0x00, 0xc2, 0xff, 0xe7, 0x00, 0x67, 0xff, 0xef, 0x00, 0x17, 0xff, 0xf7,
    0x00, 0x0e, 0xff, 0xf7, 0x00, 0x15, 0xff, 0xf7, 0x00, 0x1d, 0xff, 0xff, 0x00, 0x24, 0xff, 0xff,
    0x00, 0x2c, 0xff, 0xff, 0x00, 0x34, 0xff, 0xff, 0x00, 0x3b, 0xff, 0xf7, 0x00, 0x43, 0xff, 0xf7,
    0x00, 0x54, 0xff, 0xf7, 0x00, 0x98, 0xff, 0xef, 0x00, 0xd7, 0xff, 0xde, 0x00, 0xff, 0xff, 0xce,
    0x02, 0xd9, 0xf9, 0xb5, 0x10, 0x70, 0xc1, 0x9c, 0x22, 0x22, 0x79, 0x6b, 0x24, 0x24, 0x71, 0x39,
    0x2f, 0x2f, 0x45, 0x10, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x31, 0x31, 0x3c, 0x08, 0x27, 0x27, 0x65, 0x39,
    0x21, 0x21, 0x79, 0x6b, 0x10, 0x70, 0xc2, 0xa5, 0x01, 0xe6, 0xfc, 0xc6, 0x00, 0xff, 0xff, 0xde,
    0x00, 0x95, 0xff, 0xe7, 0x00, 0x27, 0xff, 0xf7, 0x00, 0x07, 0xff, 0xf7, 0x00, 0x0e, 0xff, 0xff,
    0x00, 0x16, 0xff, 0xff, 0x00, 0x1e, 0xff, 0xff, 0x00, 0x25, 0xff, 0xff, 0x00, 0x2c, 0xff, 0xff,
    0x00, 0x34, 0xff, 0xff, 0x2f, 0x4a, 0xfd, 0xff, 0x87, 0x91, 0xf8, 0xff, 0x8d, 0x98, 0xf9, 0xff,
    0x44, 0x67, 0xfb, 0xff, 0x00, 0x5a, 0xff, 0xf7, 0x00, 0x79, 0xff, 0xef, 0x00, 0xc1, 0xff, 0xe7,
    0x00, 0xff, 0xff, 0xd6, 0x01, 0xe6, 0xfc, 0xbd, 0x10, 0x70, 0xc1, 0x9c, 0x21, 0x21, 0x7a, 0x63,
    0x26, 0x26, 0x67, 0x31, 0x31, 0x31, 0x3c, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x2a, 0x2a, 0x55, 0x21, 0x21, 0x21, 0x79, 0x5a,
    0x15, 0x5c, 0xab, 0x9c, 0x02, 0xd9, 0xf9, 0xc6, 0x00, 0xff, 0xff, 0xde, 0x00, 0x86, 0xff, 0xef,
    0x00, 0x07, 0xff, 0xf7, 0x00, 0x08, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x17, 0xff, 0xff,
    0x00, 0x1e, 0xff, 0xff, 0x00, 0x25, 0xff, 0xff, 0x00, 0x2d, 0xff, 0xff, 0x00, 0x35, 0xff, 0xff,
    0x84, 0x8c, 0xfa, 0xff, 0xf1, 0xf1, 0xfb, 0xff, 0xf8, 0xf8, 0xfd, 0xff, 0xf5, 0xf4, 0xfc, 0xff,
    0xf8, 0xf8, 0xfa, 0xff, 0x9d, 0xab, 0xf9, 0xff, 0x00, 0x69, 0xff, 0xf7, 0x00, 0x75, 0xff, 0xef,
    0x00, 0xbf, 0xff, 0xe7, 0x00, 0xff, 0xff, 0xd6, 0x02, 0xd9, 0xf9, 0xb5, 0x15, 0x5c, 0xaa, 0x94,
    0x22, 0x22, 0x78, 0x52, 0x2a, 0x2a, 0x55, 0x21, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x2f, 0x2f, 0x44, 0x10, 0x23, 0x23, 0x72, 0x42, 0x1f, 0x33, 0x81, 0x8c,
    0x05, 0xb4, 0xeb, 0xbd, 0x00, 0xff, 0xff, 0xd6, 0x00, 0x95, 0xff, 0xe7, 0x00, 0x07, 0xff, 0xf7,
    0x00, 0x08, 0xff, 0xff, 0x00, 0x10, 0xff, 0xff, 0x00, 0x17, 0xff, 0xff, 0x00, 0x1f, 0xff, 0xff,
    0x09, 0x29, 0xfe, 0xff, 0x06, 0x2f, 0xfe, 0xff, 0x00, 0x35, 0xff, 0xff, 0x6d, 0x79, 0xfa, 0xff,
    0xf8, 0xf9, 0xfc, 0xff, 0xc4, 0xc7, 0xf9, 0xff, 0x33, 0x5f, 0xfc, 0xff, 0x1e, 0x5e, 0xfc, 0xff,
    0xad, 0xb9, 0xf9, 0xff, 0xfa, 0xfb, 0xfc, 0xff, 0x5e, 0x89, 0xfb, 0xff, 0x00, 0x78, 0xff, 0xf7,
    0x00, 0x83, 0xff, 0xef, 0x00, 0xcd, 0xff, 0xe7, 0x00, 0xff, 0xff, 0xce, 0x05, 0xb4, 0xeb, 0xb5,
    0x1f, 0x33, 0x83, 0x7b, 0x23, 0x23, 0x74, 0x39, 0x2f, 0x2f, 0x44, 0x08, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x29, 0x29, 0x59, 0x31, 0x22, 0x22, 0x79, 0x63, 0x0e, 0x7a, 0xc4, 0xad,
    0x00, 0xff, 0xff, 0xce, 0x00, 0xc2, 0xff, 0xe7, 0x00, 0x28, 0xff, 0xf7, 0x00, 0x09, 0xff, 0xff,
    0x00, 0x10, 0xff, 0xff, 0x00, 0x18, 0xff, 0xff, 0x00, 0x1f, 0xff, 0xff, 0x97, 0x9a, 0xfa, 0xff,
    0xf0, 0xf0, 0xfa, 0xff, 0xee, 0xef, 0xfa, 0xff, 0xa1, 0xa8, 0xfb, 0xff, 0xda, 0xdb, 0xf8, 0xff,
    0xd6, 0xd9, 0xfa, 0xff, 0xa4, 0xae, 0xf5, 0xff, 0xee, 0xf0, 0xfa, 0xff, 0xef, 0xf1, 0xfa, 0xff,
    0x96, 0xa9, 0xf9, 0xff, 0x84, 0x9f, 0xf8, 0xff, 0x25, 0x7c, 0xff, 0xff, 0x00, 0x80, 0xff, 0xff,
    0x00, 0x87, 0xff, 0xf7, 0x00, 0xa0, 0xff, 0xef, 0x00, 0xe6, 0xff, 0xde, 0x00, 0xff, 0xff, 0xc6,
    0x0e, 0x7a, 0xc5, 0x9c, 0x22, 0x22, 0x77, 0x5a, 0x29, 0x29, 0x59, 0x21, 0x33, 0x33, 0x33, 0x00,
    0x31, 0x31, 0x3d, 0x08, 0x23, 0x23, 0x71, 0x42, 0x20, 0x2e, 0x80, 0x94, 0x03, 0xc3, 0xf1, 0xbd,
    0x00, 0xff, 0xff, 0xde, 0x00, 0x68, 0xff, 0xef, 0x00, 0x09, 0xff, 0xf7, 0x00, 0x10, 0xff, 0xff,
    0x00, 0x18, 0xff, 0xff, 0x00, 0x1f, 0xff, 0xff, 0x13, 0x2f, 0xfc, 0xff, 0xf5, 0xf5, 0xfc, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xff,
    0xbc, 0xc4, 0xf2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xf4, 0xf6, 0xfc, 0xff, 0x0d, 0x79, 0xfd, 0xff, 0x00, 0x81, 0xff, 0xff, 0x00, 0x88, 0xff, 0xff,
    0x00, 0x90, 0xff, 0xff, 0x00, 0x97, 0xff, 0xf7, 0x00, 0xc6, 0xff, 0xe7, 0x00, 0xff, 0xff, 0xd6,
    0x03, 0xc3, 0xf1, 0xb5, 0x20, 0x2e, 0x7e, 0x8c, 0x23, 0x23, 0x70, 0x39, 0x31, 0x31, 0x3d, 0x08,
    0x2d, 0x2d, 0x4c, 0x31, 0x22, 0x22, 0x79, 0x63, 0x14, 0x62, 0xb0, 0xb5, 0x00, 0xff, 0xff, 0xce,
    0x00, 0xc7, 0xff, 0xe7, 0x00, 0x18, 0xff, 0xf7, 0x00, 0x11, 0xff, 0xff, 0x00, 0x18, 0xff, 0xff,
    0x00, 0x1f, 0xff, 0xff, 0x94, 0x98, 0xfb, 0xff, 0xcd, 0xd0, 0xf6, 0xff, 0xfe, 0xfe, 0xfe, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xfa, 0xfd, 0xff,
    0xda, 0xdd, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xfe, 0xfe, 0xfe, 0xff, 0xce, 0xd8, 0xf7, 0xff, 0x93, 0xb4, 0xfa, 0xff, 0x00, 0x90, 0xff, 0xff,
    0x00, 0x98, 0xff, 0xff, 0x00, 0x9f, 0xff, 0xf7, 0x00, 0xad, 0xff, 0xef, 0x00, 0xed, 0xff, 0xde,
    0x00, 0xff, 0xff, 0xc6, 0x14, 0x62, 0xaf, 0xa5, 0x22, 0x22, 0x77, 0x5a, 0x2d, 0x2d, 0x4d, 0x21,
    0x29, 0x29, 0x59, 0x4a, 0x21, 0x21, 0x7a, 0x8c, 0x0a, 0x92, 0xd8, 0xc6, 0x00, 0xff, 0xff, 0xd6,
    0x00, 0x8c, 0xff, 0xef, 0x00, 0x11, 0xff, 0xf7, 0x00, 0x18, 0xff, 0xff, 0x00, 0x21, 0xff, 0xff,
    0x7c, 0x81, 0xfa, 0xff, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xec, 0xed, 0xf8, 0xff,
    0xe4, 0xe8, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xff, 0x7f, 0xb1, 0xf9, 0xff,
    0x00, 0x9f, 0xff, 0xff, 0x00, 0xa7, 0xff, 0xff, 0x00, 0xae, 0xff, 0xf7, 0x00, 0xdd, 0xff, 0xe7,
    0x00, 0xff, 0xff, 0xce, 0x0a, 0x92, 0xd8, 0xb5, 0x22, 0x22, 0x75, 0x7b, 0x29, 0x29, 0x5a, 0x42,
    0x26, 0x26, 0x66, 0x5a, 0x22, 0x22, 0x75, 0xa5, 0x04, 0xbc, 0xef, 0xce, 0x00, 0xff, 0xff, 0xde,
    0x00, 0x5d, 0xff, 0xef, 0x00, 0x19, 0xff, 0xff, 0x00, 0x21, 0xff, 0xff, 0x00, 0x28, 0xff, 0xff,
    0xa1, 0xa5, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xea, 0xec, 0xf8, 0xff,
    0xe9, 0xec, 0xf6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa4, 0xc6, 0xf8, 0xff,
    0x00, 0xa7, 0xff, 0xff, 0x00, 0xaf, 0xff, 0xff, 0x00, 0xb6, 0xff, 0xf7, 0x00, 0xd3, 0xff, 0xef,
    0x00, 0xff, 0xff, 0xd6, 0x04, 0xbc, 0xef, 0xc6, 0x22, 0x22, 0x79, 0x9c, 0x26, 0x26, 0x65, 0x4a,
    0x23, 0x23, 0x72, 0x63, 0x22, 0x22, 0x76, 0xbd, 0x01, 0xdf, 0xfb, 0xd6, 0x00, 0xff, 0xff, 0xe7,
    0x00, 0x3d, 0xff, 0xf7, 0x00, 0x21, 0xff, 0xff, 0x00, 0x28, 0xff, 0xff, 0x00, 0x30, 0xff, 0xff,
    0x4c, 0x5c, 0xfb, 0xff, 0xf5, 0xf5, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf6, 0xf7, 0xfd, 0xff,
    0xf0, 0xf2, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf5, 0xf7, 0xfc, 0xff, 0x4a, 0xae, 0xfc, 0xff,
    0x00, 0xb0, 0xff, 0xff, 0x00, 0xb7, 0xff, 0xff, 0x00, 0xbf, 0xff, 0xf7, 0x00, 0xcf, 0xff, 0xef,
    0x00, 0xff, 0xff, 0xde, 0x01, 0xdf, 0xfb, 0xce, 0x22, 0x22, 0x76, 0xad, 0x24, 0x24, 0x6d, 0x52,
    0x23, 0x23, 0x74, 0x63, 0x21, 0x21, 0x7a, 0xce, 0x00, 0xf6, 0xfe, 0xde, 0x00, 0xff, 0xff, 0xe7,
    0x00, 0x2b, 0xff, 0xf7, 0x00, 0x29, 0xff, 0xff, 0x00, 0x31, 0xff, 0xff, 0x00, 0x38, 0xff, 0xff,
    0x00, 0x40, 0xff, 0xff, 0x74, 0x83, 0xfa, 0xff, 0xe1, 0xe4, 0xfa, 0xff, 0xf6, 0xf7, 0xf9, 0xff,
    0xfc, 0xfd, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xfc, 0xfd, 0xfd, 0xff,
    0xf6, 0xf7, 0xf9, 0xff, 0xe0, 0xe8, 0xf9, 0xff, 0x74, 0xb8, 0xfa, 0xff, 0x00, 0xb0, 0xff, 0xff,
    0x00, 0xb8, 0xff, 0xff, 0x00, 0xbf, 0xff, 0xff, 0x00, 0xc7, 0xff, 0xff, 0x00, 0xcf, 0xff, 0xef,
    0x00, 0xff, 0xff, 0xde, 0x00, 0xf6, 0xfe, 0xce, 0x22, 0x22, 0x79, 0xbd, 0x22, 0x22, 0x76, 0x5a,
    0x23, 0x23, 0x74, 0x63, 0x21, 0x21, 0x7b, 0xce, 0x00, 0xf6, 0xfe, 0xde, 0x00, 0xff, 0xff, 0xe7,
    0x00, 0x32, 0xff, 0xf7, 0x00, 0x31, 0xff, 0xff, 0x00, 0x39, 0xff, 0xff, 0x00, 0x40, 0xff, 0xff,
    0x00, 0x47, 0xff, 0xff, 0x12, 0x52, 0xfe, 0xff, 0x91, 0x9f, 0xf9, 0xff, 0xbe, 0xc6, 0xfc, 0xff,
    0xc9, 0xd0, 0xf6, 0xff, 0xd4, 0xd9, 0xf3, 0xff, 0xe8, 0xe9, 0xf5, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xe7, 0xeb, 0xf7, 0xff, 0xd4, 0xdd, 0xf5, 0xff, 0xc8, 0xd7, 0xf6, 0xff,
    0xbe, 0xd6, 0xfc, 0xff, 0x91, 0xc2, 0xfa, 0xff, 0x09, 0xb0, 0xfe, 0xff, 0x00, 0xb8, 0xff, 0xff,
    0x00, 0xc0, 0xff, 0xff, 0x00, 0xc7, 0xff, 0xff, 0x00, 0xce, 0xff, 0xff, 0x00, 0xd8, 0xff, 0xef,
    0x00, 0xff, 0xff, 0xde, 0x00, 0xf6, 0xfe, 0xce, 0x22, 0x22, 0x77, 0xbd, 0x22, 0x22, 0x78, 0x5a,
    0x24, 0x24, 0x70, 0x63, 0x22, 0x22, 0x75, 0xbd, 0x01, 0xdf, 0xfb, 0xd6, 0x00, 0xff, 0xff, 0xe7,
    0x00, 0x51, 0xff, 0xf7, 0x00, 0x39, 0xff, 0xff, 0x00, 0x41, 0xff, 0xff, 0x00, 0x48, 0xff, 0xff,
    0x10, 0x51, 0xfe, 0xff, 0xd1, 0xd5, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf6, 0xf7, 0xfd, 0xff,
    0xf5, 0xf6, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xce, 0xe4, 0xfb, 0xff, 0x0f, 0xc0, 0xfe, 0xff,
    0x00, 0xc8, 0xff, 0xff, 0x00, 0xcf, 0xff, 0xff, 0x00, 0xd7, 0xff, 0xf7, 0x00, 0xe3, 0xff, 0xef,
    0x00, 0xff, 0xff, 0xde, 0x01, 0xdf, 0xfb, 0xce, 0x22, 0x22, 0x76, 0xad, 0x24, 0x24, 0x6e, 0x52,
    0x26, 0x26, 0x67, 0x52, 0x21, 0x21, 0x7b, 0xa5, 0x04, 0xbc, 0xef, 0xce, 0x00, 0xff, 0xff, 0xde,
    0x00, 0x78, 0xff, 0xef, 0x00, 0x41, 0xff, 0xf7, 0x00, 0x48, 0xff, 0xff, 0x00, 0x50, 0xff, 0xff,
    0x89, 0x99, 0xfa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xea, 0xee, 0xf8, 0xff,
    0xec, 0xf0, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8b, 0xd2, 0xf9, 0xff,
    0x00, 0xcf, 0xff, 0xff, 0x00, 0xd7, 0xff, 0xff, 0x00, 0xde, 0xff, 0xf7, 0x00, 0xee, 0xff, 0xef,
    0x00, 0xff, 0xff, 0xd6, 0x04, 0xbc, 0xef, 0xc6, 0x22, 0x22, 0x76, 0x9c, 0x26, 0x26, 0x65, 0x4a,
    0x29, 0x29, 0x5a, 0x4a, 0x22, 0x22, 0x78, 0x8c, 0x0a, 0x92, 0xd9, 0xc6, 0x00, 0xff, 0xff, 0xd6,
    0x00, 0xa6, 0xff, 0xef, 0x00, 0x49, 0xff, 0xf7, 0x00, 0x50, 0xff, 0xff, 0x00, 0x58, 0xff, 0xff,
    0x9e, 0xab, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe6, 0xea, 0xf4, 0xff,
    0xe7, 0xec, 0xf6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xdb, 0xf8, 0xff,
    0x00, 0xd8, 0xff, 0xff, 0x00, 0xde, 0xff, 0xff, 0x00, 0xe7, 0xff, 0xf7, 0x00, 0xf7, 0xff, 0xe7,
    0x00, 0xff, 0xff, 0xce, 0x0a, 0x92, 0xd8, 0xb5, 0x22, 0x22, 0x78, 0x7b, 0x29, 0x29, 0x59, 0x42,
    0x2d, 0x2d, 0x4c, 0x39, 0x22, 0x22, 0x78, 0x6b, 0x13, 0x61, 0xb1, 0xb5, 0x00, 0xff, 0xff, 0xce,
    0x00, 0xd7, 0xff, 0xe7, 0x00, 0x5c, 0xff, 0xf7, 0x00, 0x58, 0xff, 0xff, 0x00, 0x5f, 0xff, 0xff,
    0x36, 0x71, 0xfd, 0xff, 0xe1, 0xe4, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xea, 0xfd, 0xff,
    0xe0, 0xeb, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xdf, 0xef, 0xf9, 0xff, 0x37, 0xd8, 0xfd, 0xff,
    0x00, 0xdf, 0xff, 0xff, 0x00, 0xe7, 0xff, 0xf7, 0x00, 0xef, 0xff, 0xef, 0x00, 0xfd, 0xff, 0xde,
    0x00, 0xff, 0xff, 0xc6, 0x14, 0x62, 0xae, 0xa5, 0x22, 0x22, 0x78, 0x5a, 0x2d, 0x2d, 0x4c, 0x29,
    0x31, 0x31, 0x3d, 0x08, 0x23, 0x23, 0x70, 0x42, 0x1f, 0x2d, 0x81, 0x94, 0x03, 0xc3, 0xf1, 0xbd,
    0x00, 0xff, 0xff, 0xde, 0x00, 0x9c, 0xff, 0xef, 0x00, 0x60, 0xff, 0xf7, 0x00, 0x67, 0xff, 0xff,
    0x00, 0x70, 0xff, 0xff, 0x0d, 0x78, 0xfe, 0xff, 0x57, 0x8c, 0xf4, 0xff, 0xfd, 0xfd, 0xfd, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbc, 0xd5, 0xf9, 0xff,
    0xbe, 0xd8, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xfb, 0xfc, 0xfd, 0xff, 0x4c, 0xc8, 0xf4, 0xff, 0x0d, 0xd7, 0xfe, 0xff, 0x00, 0xdf, 0xff, 0xff,
    0x00, 0xe7, 0xff, 0xff, 0x00, 0xef, 0xff, 0xf7, 0x00, 0xfa, 0xff, 0xe7, 0x00, 0xff, 0xff, 0xd6,
    0x03, 0xc3, 0xf1, 0xb5, 0x20, 0x2e, 0x7d, 0x8c, 0x24, 0x24, 0x70, 0x39, 0x31, 0x31, 0x3d, 0x08,
    0x33, 0x33, 0x33, 0x00, 0x29, 0x29, 0x5b, 0x31, 0x22, 0x22, 0x76, 0x6b, 0x0e, 0x7a, 0xc5, 0xad,
    0x00, 0xff, 0xff, 0xce, 0x00, 0xd9, 0xff, 0xe7, 0x00, 0x80, 0xff, 0xf7, 0x00, 0x70, 0xff, 0xf7,
    0x00, 0x77, 0xff, 0xff, 0x00, 0x7e, 0xff, 0xff, 0x00, 0x86, 0xff, 0xff, 0xd9, 0xe2, 0xf8, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe6, 0xee, 0xfb, 0xff, 0x47, 0xb0, 0xfd, 0xff,
    0x48, 0xb7, 0xfc, 0xff, 0xe7, 0xf0, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xd5, 0xeb, 0xf9, 0xff, 0x00, 0xd9, 0xff, 0xff, 0x00, 0xe0, 0xff, 0xff, 0x00, 0xe8, 0xff, 0xff,
    0x00, 0xef, 0xff, 0xf7, 0x00, 0xf7, 0xff, 0xef, 0x00, 0xff, 0xff, 0xde, 0x00, 0xff, 0xff, 0xc6,
    0x0e, 0x7a, 0xc5, 0xa5, 0x21, 0x21, 0x79, 0x5a, 0x2a, 0x2a, 0x59, 0x29, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x2f, 0x2f, 0x45, 0x10, 0x23, 0x23, 0x72, 0x42, 0x1f, 0x33, 0x84, 0x8c,
    0x05, 0xb4, 0xeb, 0xbd, 0x00, 0xff, 0xff, 0xd6, 0x00, 0xc4, 0xff, 0xe7, 0x00, 0x7c, 0xff, 0xf7,
    0x00, 0x7f, 0xff, 0xff, 0x00, 0x86, 0xff, 0xff, 0x00, 0x8e, 0xff, 0xff, 0x2a, 0x97, 0xfd, 0xff,
    0x99, 0xc2, 0xfc, 0xff, 0x96, 0xc2, 0xfa, 0xff, 0x27, 0xad, 0xfe, 0xff, 0x00, 0xb4, 0xff, 0xff,
    0x00, 0xbb, 0xff, 0xff, 0x2a, 0xc2, 0xfc, 0xff, 0x96, 0xd8, 0xfb, 0xff, 0x96, 0xdc, 0xfb, 0xff,
    0x2a, 0xd8, 0xfd, 0xff, 0x00, 0xe1, 0xff, 0xff, 0x00, 0xe8, 0xff, 0xff, 0x00, 0xf0, 0xff, 0xf7,
    0x00, 0xf7, 0xff, 0xef, 0x00, 0xff, 0xff, 0xe7, 0x00, 0xff, 0xff, 0xce, 0x05, 0xb4, 0xeb, 0xad,
    0x1f, 0x33, 0x83, 0x7b, 0x23, 0x23, 0x73, 0x39, 0x2f, 0x2f, 0x44, 0x08, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x2a, 0x2a, 0x56, 0x29, 0x21, 0x21, 0x79, 0x5a,
    0x14, 0x5b, 0xad, 0x9c, 0x02, 0xd9, 0xf9, 0xc6, 0x00, 0xff, 0xff, 0xde, 0x00, 0xc2, 0xff, 0xef,
    0x00, 0x8a, 0xff, 0xf7, 0x00, 0x8f, 0xff, 0xff, 0x00, 0x96, 0xff, 0xff, 0x00, 0x9d, 0xff, 0xff,
    0x00, 0xa5, 0xff, 0xff, 0x00, 0xac, 0xff, 0xff, 0x00, 0xb4, 0xff, 0xff, 0x00, 0xbb, 0xff, 0xff,
    0x00, 0xc3, 0xff, 0xff, 0x00, 0xca, 0xff, 0xff, 0x00, 0xd2, 0xff, 0xff, 0x00, 0xd9, 0xff, 0xff,
    0x00, 0xe1, 0xff, 0xff, 0x00, 0xe8, 0xff, 0xff, 0x00, 0xf0, 0xff, 0xf7, 0x00, 0xf8, 0xff, 0xef,
    0x00, 0xff, 0xff, 0xe7, 0x00, 0xff, 0xff, 0xce, 0x02, 0xd9, 0xf9, 0xb5, 0x15, 0x5c, 0xaa, 0x94,
    0x22, 0x22, 0x75, 0x52, 0x2a, 0x2a, 0x57, 0x21, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x31, 0x31, 0x3c, 0x08, 0x26, 0x26, 0x69, 0x39,
    0x22, 0x22, 0x78, 0x6b, 0x10, 0x70, 0xc2, 0xa5, 0x01, 0xe6, 0xfc, 0xc6, 0x00, 0xff, 0xff, 0xde,
    0x00, 0xd0, 0xff, 0xe7, 0x00, 0xa7, 0xff, 0xf7, 0x00, 0x9e, 0xff, 0xf7, 0x00, 0xa6, 0xff, 0xff,
    0x00, 0xad, 0xff, 0xff, 0x00, 0xb5, 0xff, 0xff, 0x00, 0xbc, 0xff, 0xff, 0x00, 0xc4, 0xff, 0xff,
    0x00, 0xcb, 0xff, 0xff, 0x00, 0xd2, 0xff, 0xff, 0x00, 0xda, 0xff, 0xff, 0x00, 0xe2, 0xff, 0xff,
    0x00, 0xe9, 0xff, 0xf7, 0x00, 0xf1, 0xff, 0xf7, 0x00, 0xf9, 0xff, 0xef, 0x00, 0xff, 0xff, 0xe7,
    0x00, 0xff, 0xff, 0xce, 0x01, 0xe6, 0xfc, 0xbd, 0x10, 0x70, 0xc3, 0x94, 0x21, 0x21, 0x79, 0x63,
    0x26, 0x26, 0x67, 0x31, 0x31, 0x31, 0x3c, 0x08, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x2f, 0x2f, 0x45, 0x10,
    0x24, 0x24, 0x70, 0x42, 0x21, 0x21, 0x7a, 0x73, 0x10, 0x70, 0xc2, 0xa5, 0x02, 0xd9, 0xf9, 0xbd,
    0x00, 0xff, 0xff, 0xd6, 0x00, 0xe8, 0xff, 0xe7, 0x00, 0xca, 0xff, 0xef, 0x00, 0xb2, 0xff, 0xf7,
    0x00, 0xb5, 0xff, 0xf7, 0x00, 0xbc, 0xff, 0xf7, 0x00, 0xc4, 0xff, 0xff, 0x00, 0xcc, 0xff, 0xff,
    0x00, 0xd3, 0xff, 0xff, 0x00, 0xdb, 0xff, 0xf7, 0x00, 0xe2, 0xff, 0xf7, 0x00, 0xea, 0xff, 0xf7,
    0x00, 0xf2, 0xff, 0xef, 0x00, 0xfb, 0xff, 0xe7, 0x00, 0xff, 0xff, 0xde, 0x00, 0xff, 0xff, 0xce,
    0x02, 0xd9, 0xf9, 0xb5, 0x10, 0x70, 0xc3, 0x94, 0x21, 0x21, 0x7a, 0x6b, 0x24, 0x24, 0x6f, 0x39,
    0x2f, 0x2f, 0x45, 0x08, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x2e, 0x2e, 0x48, 0x10, 0x24, 0x24, 0x71, 0x42, 0x22, 0x22, 0x79, 0x73, 0x15, 0x5c, 0xab, 0x9c,
    0x05, 0xb4, 0xeb, 0xb5, 0x00, 0xff, 0xff, 0xce, 0x00, 0xff, 0xff, 0xde, 0x00, 0xef, 0xff, 0xe7,
    0x00, 0xe0, 0xff, 0xef, 0x00, 0xd7, 0xff, 0xef, 0x00, 0xd4, 0xff, 0xef, 0x00, 0xd5, 0xff, 0xf7,
    0x00, 0xdc, 0xff, 0xef, 0x00, 0xe7, 0xff, 0xef, 0x00, 0xf1, 0xff, 0xef, 0x00, 0xf8, 0xff, 0xe7,
    0x00, 0xfe, 0xff, 0xde, 0x00, 0xff, 0xff, 0xd6, 0x00, 0xff, 0xff, 0xc6, 0x05, 0xb4, 0xec, 0xad,
    0x15, 0x5c, 0xab, 0x94, 0x21, 0x21, 0x7a, 0x63, 0x24, 0x24, 0x71, 0x39, 0x2e, 0x2e, 0x47, 0x10,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x2f, 0x2f, 0x45, 0x10, 0x26, 0x26, 0x69, 0x39, 0x22, 0x22, 0x77, 0x5a,
    0x1e, 0x32, 0x84, 0x8c, 0x0e, 0x7a, 0xc6, 0xa5, 0x03, 0xc3, 0xf1, 0xb5, 0x00, 0xff, 0xff, 0xce,
    0x00, 0xff, 0xff, 0xd6, 0x00, 0xff, 0xff, 0xde, 0x00, 0xff, 0xff, 0xde, 0x00, 0xff, 0xff, 0xe7,
    0x00, 0xff, 0xff, 0xe7, 0x00, 0xff, 0xff, 0xde, 0x00, 0xff, 0xff, 0xd6, 0x00, 0xff, 0xff, 0xce,
    0x00, 0xff, 0xff, 0xc6, 0x03, 0xc3, 0xf1, 0xad, 0x0e, 0x7a, 0xc5, 0x9c, 0x1e, 0x32, 0x84, 0x84,
    0x22, 0x22, 0x78, 0x52, 0x26, 0x26, 0x67, 0x31, 0x2f, 0x2f, 0x45, 0x08, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x31, 0x31, 0x3c, 0x08, 0x2a, 0x2a, 0x56, 0x29,
    0x22, 0x22, 0x76, 0x4a, 0x21, 0x21, 0x79, 0x63, 0x1f, 0x2d, 0x82, 0x8c, 0x14, 0x62, 0xb0, 0xad,
    0x0a, 0x92, 0xd8, 0xbd, 0x04, 0xbc, 0xf0, 0xce, 0x01, 0xdf, 0xfb, 0xd6, 0x00, 0xf6, 0xfe, 0xd6,
    0x00, 0xf6, 0xfe, 0xd6, 0x01, 0xdf, 0xfb, 0xce, 0x04, 0xbc, 0xf0, 0xc6, 0x0a, 0x92, 0xd8, 0xbd,
    0x14, 0x62, 0xaf, 0xa5, 0x20, 0x2e, 0x80, 0x84, 0x22, 0x22, 0x79, 0x63, 0x23, 0x23, 0x73, 0x42,
    0x2a, 0x2a, 0x57, 0x21, 0x31, 0x31, 0x3c, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x2f, 0x2f, 0x45, 0x10, 0x29, 0x29, 0x5b, 0x29, 0x23, 0x23, 0x72, 0x42, 0x21, 0x21, 0x79, 0x6b,
    0x21, 0x21, 0x79, 0x8c, 0x21, 0x21, 0x7a, 0xa5, 0x21, 0x21, 0x7a, 0xb5, 0x21, 0x21, 0x7a, 0xc6,
    0x22, 0x22, 0x77, 0xc6, 0x22, 0x22, 0x77, 0xb5, 0x22, 0x22, 0x79, 0x9c, 0x22, 0x22, 0x79, 0x84,
    0x22, 0x22, 0x78, 0x63, 0x23, 0x23, 0x72, 0x42, 0x29, 0x29, 0x5a, 0x29, 0x2f, 0x2f, 0x44, 0x08,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x30, 0x30, 0x3d, 0x08, 0x2c, 0x2c, 0x4d, 0x31,
    0x29, 0x29, 0x5c, 0x4a, 0x26, 0x26, 0x65, 0x52, 0x24, 0x24, 0x70, 0x5a, 0x22, 0x22, 0x79, 0x63,
    0x22, 0x22, 0x79, 0x63, 0x24, 0x24, 0x6f, 0x5a, 0x26, 0x26, 0x68, 0x52, 0x29, 0x29, 0x5a, 0x42,
    0x2d, 0x2d, 0x4c, 0x29, 0x31, 0x31, 0x3d, 0x08, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00,
    0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00, 0x33, 0x33, 0x33, 0x00
];
