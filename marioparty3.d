module me.timz.n64.marioparty3;

import me.timz.n64.marioparty;
import me.timz.n64.plugin;
import std.algorithm;
import std.random;
import std.range;
import std.conv;
import std.traits;
import std.stdio;
import std.string;
import std.file;
import std.json;

class Config {
    Character[] characters = [Character.UNDEFINED, Character.UNDEFINED, Character.UNDEFINED, Character.UNDEFINED];
    bool alwaysDuel = false;
    bool lastPlaceDoubleRoll = false;
    bool teamMode = false;
    bool randomBonus = false;
    string[BonusType] bonuses;
    int[Character] teams;
    bool enhancedTaunts = false;
    bool preventRepeatMiniGames = false;
    bool randomChanceOrder = false;
    bool itemsOnFinalTurn = false;
    float luckySpaceRatio = 0.0;
    MiniGame[] blockedMiniGames;
    bool doubleCoinMiniGames = false;
    bool mpiqPermadeath = false;
    bool finalResultsDoNotProceed = false;
    bool improveLastFiveTurnsBonus = false;
    bool singleUseBattleSpaces = false;
    bool unlockEverything = false;
    int revealHiddenBlocksOnRemainingTurns = 0;
    float mapScrollSpeedMultiplier = 1.0;
    bool increaseItemGameVariety = false;
    bool increaseItemShopVariety = false;
    float toadShopChance = -1.0;
    bool replaceWackyWatch = false;

    this() {
        bonuses = [
            BonusType.MINI_GAME: "Mini-Game",
            BonusType.COIN:      "Coin",
            BonusType.HAPPENING: "Happening",
            BonusType.RED:       "Unlucky",
            BonusType.BLUE:      "Blue",
            BonusType.CHANCE:    "Chance",
            BonusType.BOWSER:    "Bowser",
            BonusType.BATTLE:    "Battle",
            BonusType.ITEM:      "Item",
            BonusType.BANK:      "Banking",
            BonusType.GAME_GUY:  "Gambling",
            BonusType.LUCKY:     "Lucky"
        ];
    }
}

class PlayerState {
    int luckySpaceCount = 0;
}

class State {
    PlayerState[] players = [
        new PlayerState(),
        new PlayerState(),
        new PlayerState(),
        new PlayerState()
    ];
    ShuffleQueue!MiniGame[MiniGameType] miniGameQueue;
    CustomSpace[] customSpaces;
    ubyte[] usedBattleSpaces;
    string[] boardNames;
}

union Memory {
    ubyte[0x800000] ram;
    mixin Field!(0x80009A1C, Instruction, "storeButtonPress");
    mixin Field!(0x8000B198, Instruction, "randomByteRoutine");
    mixin Field!(0x80036574, Instruction, "textLength");
    mixin Field!(0x800365A8, Instruction, "textChar");
    mixin Field!(0x8004ACE0, Instruction, "playSFX");
    mixin Field!(0x80097650, uint, "randomState");
    mixin Field!(0x800CC4E4, ushort, "itemHiddenBlock");
    mixin Field!(0x800CD059, ubyte, "currentBoard");
    mixin Field!(0x800CD05A, ubyte, "totalTurns");
    mixin Field!(0x800CD05B, ubyte, "currentTurn");
    mixin Field!(0x800CD067, ubyte, "currentPlayerIndex");
    mixin Field!(0x800CD069, ubyte, "currentSpaceIndex");
    mixin Field!(0x800CDA7C, Arr!(ushort, 4), "buttons");
    mixin Field!(0x800CE1C4, ushort, "coinHiddenBlock");
    mixin Field!(0x800CE200, Scene, "currentScene");
    mixin Field!(0x800D1108, Arr!(Player, 4), "players");
    mixin Field!(0x800D124E, ushort, "starHiddenBlock");
    mixin Field!(0x800DFE88, Instruction, "chooseGameRoutine");
    mixin Field!(0x800EB094, Instruction, "spacesLoaded");
    mixin Field!(0x800F52C4, Instruction, "determineTeams");
    mixin Field!(0x800FAB98, Instruction, "duelRoutine");
    mixin Field!(0x800FB624, Instruction, "battleRoutine");
    mixin Field!(0x800FC3C8, Instruction, "battleRoutineComplete");
    mixin Field!(0x800FE29C, Instruction, "blueOrRedSpaceCoins");
    mixin Field!(0x80101780, uint, "chancePlayer1");
    mixin Field!(0x80101784, uint, "chancePlayer2");
    mixin Field!(0x80101DE8, Arr!(ubyte, 27), "gamePhaseTable");
    mixin Field!(0x80102C08, Arr!(MiniGame, 5), "miniGameRoulette");
    mixin Field!(0x80102C58, Ptr!Instruction, "booRoutinePtr");
    mixin Field!(0x80105210, ushort, "spaceCount");
    mixin Field!(0x80105214, Ptr!Space, "spaces");
    mixin Field!(0x80105220, Arr!(Address, 16), "spaceTypeTexturePointers");
    mixin Field!(0x8010570E, ubyte, "numberOfRolls");
    mixin Field!(0x801057E0, Arr!(PlayerPanel, 4), "playerPanels");
    mixin Field!(0x80108470, Instruction, "loadBonusStat1a");
    mixin Field!(0x801084B4, Instruction, "loadBonusStat1b");
    mixin Field!(0x80108898, Instruction, "loadBonusStat2a");
    mixin Field!(0x801088DC, Instruction, "loadBonusStat2b");
    mixin Field!(0x80108CC0, Instruction, "loadBonusStat3a");
    mixin Field!(0x80108D04, Instruction, "loadBonusStat3b");
    mixin Field!(0x80109568, BowserEventType, "bowserEventType");
    mixin Field!(0x8010C9E8, Arr!(uint, 4), "mpiqNoJump");
    mixin Field!(0x800A11D0, Arr!(short, 5), "itemMiniGameItems");
    mixin Field!(0x8010D40C, Arr!(Item, 5), "itemMiniGameHelpScreenItems");
    mixin Field!(0x8010FE64, Arr!(ubyte, 3), "chanceOrder");
}

union Player {
    ubyte[0x38] _data;
    mixin Field!(0x01, ubyte, "cpuDifficulty");
    mixin Field!(0x02, ubyte, "controller");
    mixin Field!(0x03, Character, "character");
    mixin Field!(0x04, ubyte, "flags");
    mixin Field!(0x06, ushort, "gameCoinsExtra");
    mixin Field!(0x08, ushort, "gameCoinsMain");
    mixin Field!(0x0A, ushort, "coins");
    mixin Field!(0x0E, ubyte, "stars");
    mixin Field!(0x17, ubyte, "directionFlags");
    mixin Field!(0x18, Arr!(Item, 3), "items");
    mixin Field!(0x1C, PanelColor, "color");
    mixin Field!(0x28, ushort, "miniGameCoins");
    mixin Field!(0x2A, ushort, "maxCoins");
    mixin Field!(0x2C, ubyte, "happeningSpaces");
    mixin Field!(0x2D, ubyte, "redSpaces");
    mixin Field!(0x2E, ubyte, "blueSpaces");
    mixin Field!(0x2F, ubyte, "chanceSpaces");
    mixin Field!(0x30, ubyte, "bowserSpaces");
    mixin Field!(0x31, ubyte, "battleSpaces");
    mixin Field!(0x32, ubyte, "itemSpaces");
    mixin Field!(0x33, ubyte, "bankSpaces");
    mixin Field!(0x34, ubyte, "gameGuySpaces");
}

union Space {
    static enum Type : ubyte {
        START     = 0x00,
        BLUE      = 0x01,
        RED       = 0x02,
        INVISIBLE = 0x03,
        HAPPENING = 0x04,
        CHANCE    = 0x05,
        ITEM      = 0x06,
        BANK      = 0x07,
        INVIS_2   = 0x08,
        BATTLE    = 0x09,
        UNKNOWN_1 = 0x0A,
        UNKNOWN_2 = 0x0B,
        BOWSER    = 0x0C,
        ARROW     = 0x0D,
        STAR      = 0x0E,
        GAME_GUY  = 0x0F
    }

    ubyte[0x24] _data;
    mixin Field!(0x01, Type, "type");
}

union PlayerPanel {
    ubyte[0x6C] _data;
    mixin Field!(0x04, ubyte, "color");
}

immutable BONUS_TEXT = [
    ["<BLUE><BOLD>Mini-Game Star<NORMAL><RESET>",  "<BLUE><BOLD>Mini-Game Stars<NORMAL><RESET>",  "has won the most coins\nin Mini-Games"],
    ["<YELLOW><BOLD>Coin Star<NORMAL><RESET>",     "<YELLOW><BOLD>Coin Stars<NORMAL><RESET>",     "had the most\ncoins at any one time\nduring the game"],
    ["<GREEN><BOLD>Happening Star<NORMAL><RESET>", "<GREEN><BOLD>Happening Stars<NORMAL><RESET>", "landed on the most\n<GREEN><BOLD>? Spaces<NORMAL><RESET>"]
].map!(e => e.map!(formatText).array).array;

immutable BONUS_TEXT_REPLACEMENT = [
    ["<BLUE><BOLD>$NAME Star<NORMAL><RESET>",   "<BLUE><BOLD>$NAME Stars<NORMAL><RESET>",   "has won the most coins\nin Mini-Games"],
    ["<YELLOW><BOLD>$NAME Star<NORMAL><RESET>", "<YELLOW><BOLD>$NAME Stars<NORMAL><RESET>", "had the most\ncoins at any one time\nduring the game"],
    ["<GREEN><BOLD>$NAME Star<NORMAL><RESET>",  "<GREEN><BOLD>$NAME Stars<NORMAL><RESET>",  "landed on the most\n<GREEN><BOLD>? Spaces<NORMAL><RESET>"],
    ["<RED><BOLD>$NAME Star<NORMAL><RESET>",    "<RED><BOLD>$NAME Stars<NORMAL><RESET>",    "landed on the most\n<RED><BOLD>Red Spaces<NORMAL><RESET>"],
    ["<BLUE><BOLD>$NAME Star<NORMAL><RESET>",   "<BLUE><BOLD>$NAME Stars<NORMAL><RESET>",   "landed on the most\n<BLUE><BOLD>Blue Spaces<NORMAL><RESET>"],
    ["<GREEN><BOLD>$NAME Star<NORMAL><RESET>",  "<GREEN><BOLD>$NAME Stars<NORMAL><RESET>",  "landed on the most\n<GREEN><BOLD>! Spaces<NORMAL><RESET>"],
    ["<RED><BOLD>$NAME Star<NORMAL><RESET>",    "<RED><BOLD>$NAME Stars<NORMAL><RESET>",    "landed on the most\n<RED><BOLD>Bowser Spaces<NORMAL><RESET>"],
    ["<GREEN><BOLD>$NAME Star<NORMAL><RESET>",  "<GREEN><BOLD>$NAME Stars<NORMAL><RESET>",  "landed on the most\n<GREEN><BOLD>Battle Spaces<NORMAL><RESET>"],
    ["<GREEN><BOLD>$NAME Star<NORMAL><RESET>",  "<GREEN><BOLD>$NAME Stars<NORMAL><RESET>",  "landed on the most\n<GREEN><BOLD>Item Spaces<NORMAL><RESET>"],
    ["<GREEN><BOLD>$NAME Star<NORMAL><RESET>",  "<GREEN><BOLD>$NAME Stars<NORMAL><RESET>",  "landed on the most\n<GREEN><BOLD>Bank Spaces<NORMAL><RESET>"],
    ["<GREEN><BOLD>$NAME Star<NORMAL><RESET>",  "<GREEN><BOLD>$NAME Stars<NORMAL><RESET>",  "landed on the most\n<GREEN><BOLD>Game Guy Spaces<NORMAL><RESET>"],
    ["<BLUE><BOLD>$NAME Star<NORMAL><RESET>",   "<BLUE><BOLD>$NAME Stars<NORMAL><RESET>",   "landed on the most\n<BLUE><BOLD>Lucky Spaces<NORMAL><RESET>"]
].map!(e => e.map!(formatText).array).array;

void mallocPerm(size_t size, void delegate(uint ptr) callback) {
    0x80035864.jal(cast(ushort)size, callback);
}

void freePerm(uint ptr, void delegate() callback) {
    0x80035888.jal(ptr, callback);
}

void mallocTemp(size_t size, void delegate(uint ptr) callback) {
    0x80035934.jal(cast(ushort)size, callback);
}

void freeTemp(uint ptr, void delegate() callback) {
    0x80035958.jal(ptr, callback);
}

void showPlayerMessage(string message, byte character = -1) {
    message = formatText(message ~ "<END><NUL>");
    gpr.sp -= cast(uint)(message.length + 0b111) & ~0b111;
    message.each!((i, c) { Ptr!char(gpr.sp)[i] = c; });
    gpr.sp -= 32;
    (gpr.sp + 16).val!uint = 0;
    (gpr.sp + 20).val!uint = 0;
    (gpr.sp + 24).val!uint = 0;
    0x800EC8EC.jal(character, gpr.sp + 32, 0, 0, { // ShowPlayerMessage
        0x800EC9DC.jal({
            0x800EC6C8.jal({                       // CloseMessage
                0x800EC6EC.jal({
                    gpr.sp += 32 + (cast(uint)(message.length + 0b111) & ~0b111);
                });
            });
        });
    });
}

void showGlobalMessage(string message, byte character = -1) {
    message = formatText(message ~ "<END><NUL>");
    gpr.sp -= cast(uint)(message.length + 0b111) & ~0b111;
    message.each!((i, c) { Ptr!char(gpr.sp)[i] = c; });
    gpr.sp -= 32;
    (gpr.sp + 16).val!uint = 0;
    (gpr.sp + 20).val!uint = 0;
    (gpr.sp + 24).val!uint = 0;
    0x800EC92C.jal(character, gpr.sp + 32, 0, 0, { // ShowGlobalMessage
        //0x800ECA38.jal({
            0x800EC6C8.jal({                       // CloseMessage
                0x800EC6EC.jal({
                    gpr.sp += 32 + (cast(uint)(message.length + 0b111) & ~0b111);
                });
            });
        //});
    });
}

class MarioParty3 : MarioParty!(Config, State, Memory) {
    string gameText;
    BonusType[] bonus;
    int lastFiveTurnsBonus = 20;

    this(string name, string hash) {
        super(name, hash);
    }

    override bool lockTeams() const {
        if (data.currentScene == Scene.CHANCE_TIME) {
            if (data.chancePlayer1 < players.length && data.chancePlayer2 < players.length) {
                return team(players[data.chancePlayer1])
                    == team(players[data.chancePlayer2]);
            }
        }
        return false;
    }

    override bool disableTeams() const {
        if (data.currentScene == Scene.BOWSER_EVENT) {
            return data.bowserEventType == BowserEventType.COIN_POTLUCK
                || data.bowserEventType == BowserEventType.REVOLUTION;
        }
        return false;
    }

    alias isBoardScene = typeof(super).isBoardScene;
    alias isScoreScene = typeof(super).isScoreScene;

    override bool isBoardScene(Scene scene) const {
        switch (scene) {
            case Scene.CHILLY_WATERS_BOARD:
            case Scene.DEEP_BLOOBER_SEA_BOARD:
            case Scene.SPINY_DESERT_BOARD:
            case Scene.WOODY_WOODS_BOARD:
            case Scene.CREEPY_CAVERN_BOARD:
            case Scene.WALUIGIS_ISLAND_BOARD:
            case Scene.GATE_GUY_BOARD:
            case Scene.ARROWHEAD_BOARD:
            case Scene.PIPESQUEAK_BOARD:
            case Scene.BLOWHARD_BOARD:
            case Scene.MR_MOVER_BOARD:
            case Scene.BACKTRACK_BOARD:
                return true;
            default:
                return false;
        }
    }

    override bool isScoreScene(Scene scene) const {
        switch (scene) {
            case Scene.FINISH_BOARD:
            case Scene.BOWSER_EVENT:
            case Scene.LAST_FIVE_TURNS:
            case Scene.START_BOARD:
            case Scene.CHANCE_TIME:
            case Scene.MINI_GAME_RESULTS:
            case Scene.GAMBLE_GAME_RESULTS:
            case Scene.BATTLE_GAME_RESULTS:
                return true;
            default:
                return isBoardScene(scene);
        }
    }

    GamePhase getGamePhase() {
        auto i = clamp(cast(int)data.totalTurns, 10, 50) / 5 - 2;

        if (data.currentTurn < data.gamePhaseTable[3 * i]) {
            return GamePhase.EARLY;
        } else if (data.currentTurn < data.gamePhaseTable[3 * i + 1]) {
            return GamePhase.MID;
        } else {
            return GamePhase.END;
        }
    }

    string getCurrentBoardName() {
        if (!isBoardScene()) return null;
        int index;
        if (data.currentScene <= Scene.WALUIGIS_ISLAND_BOARD) {
            index = data.currentScene - Scene.CHILLY_WATERS_BOARD;
        } else {
            index = data.currentScene - Scene.GATE_GUY_BOARD + 6;
        }
        if (index < state.boardNames.length) {
            return state.boardNames[index];
        } else {
            return "N/A";
        }
    }

    static uint getBonusStat(Player player, BonusType type) {
        final switch (type) {
            case BonusType.MINI_GAME: return player.data.miniGameCoins;
            case BonusType.COIN:      return player.data.maxCoins;
            case BonusType.HAPPENING: return player.data.happeningSpaces;
            case BonusType.RED:       return player.data.redSpaces;
            case BonusType.BLUE:      return player.data.blueSpaces;
            case BonusType.CHANCE:    return player.data.chanceSpaces;
            case BonusType.BOWSER:    return player.data.bowserSpaces;
            case BonusType.BATTLE:    return player.data.battleSpaces;
            case BonusType.ITEM:      return player.data.itemSpaces;
            case BonusType.BANK:      return player.data.bankSpaces;
            case BonusType.GAME_GUY:  return player.data.gameGuySpaces;
            case BonusType.LUCKY:     return player.state.luckySpaceCount;
        }
    }

    override void onStart() {
        super.onStart();

        /*
        bool[uint] seen;
        0x800843F0.onExec({
            if (gpr.a0 !in seen) {
                info((cast(uint)gpr.a0).to!string(16), " ", (cast(uint)gpr.a1).to!string(16), " ", (cast(uint)gpr.a2).to!string(16), " ", (cast(uint)gpr.a3).to!string(16));
                seen[gpr.a0] = true;
            }

            if (gpr.a0 == 0x801D73D0) return;

            gpr.a0 = gpr.a1 = 0x80240340;
        });
        */

        data.currentScene.onWrite((ref Scene scene) {
            if (scene != Scene.CASTLE_GROUNDS) return;
            state.boardNames.length = 0;
            saveState();
        });

        0x800364A0.onExec({
            if (data.currentScene != Scene.CASTLE_GROUNDS) return;
            if (!state.boardNames.empty) return;
            auto result = searchMemory([0x0A4E6F74, 0x20626164, 0x20617420, 0x616C6C85, 0x19FF0000]); // "Not bad at all";
            if (result.empty) return;
            auto c = Ptr!char(result.front + 20);
            for (auto i = 0; i < 12; i++) {
                string boardName;
                while (*c <= 0x1F) c++;
                while (*c >= 0x20) boardName ~= *(c++);
                state.boardNames ~= unformatText(boardName);
            }
            saveState();
        });

        data.textLength.addr.onExec({
            auto c = Ptr!char(gpr.s0 + 2);
            gameText = "";
            foreach (i; 0..gpr.s1) {
                gameText ~= *(c++);
            }

            if (gameText == "\x0B\x27\x85\x85\x85Board\x00\x00") {
                gameText = formatText("<YELLOW>" ~ data.currentTurn.to!string ~ " / " ~ data.totalTurns.to!string ~ "<RESET><NUL><NUL>");
            }

            if (config.randomBonus && data.currentScene == Scene.FINISH_BOARD && bonus.length >= 3) {
                gameText = gameText.replace("one\nstar", "one star")
                                   .replace(formatText("<BLUE><BOLD> Mini-Game Star<NORMAL><RESET>"), formatText(" <BLUE><BOLD>Mini-Game Star<NORMAL><RESET>"))
                                   .replace(formatText("<BLUE><BOLD>Mini-Game Star<NORMAL> <RESET>"), formatText("<BLUE><BOLD>Mini-Game Star<NORMAL><RESET> "));

                foreach (i, ref bt; BONUS_TEXT) {
                    if (bt.any!(t => gameText.canFind(t))) {
                        foreach (j, ref t; bt) {
                            gameText = gameText.replace(t, BONUS_TEXT_REPLACEMENT[bonus[i]][j])
                                               .replace(formatText("$NAME"), formatText(config.bonuses[bonus[i]]));
                        }
                        break;
                    }
                }
            }

            if (config.improveLastFiveTurnsBonus && data.currentScene == Scene.LAST_FIVE_TURNS) {
                if (gameText.canFind("present of")) {
                    gameText = gameText.replace("10", lastFiveTurnsBonus.to!string);
                }
            }
            
            gpr.s1 = cast(ushort)gameText.length;
        });
        data.textChar.addr.onExec({ gpr.v0 = gameText[gpr.a0]; });

        if (config.teamMode) {
            data.duelRoutine.addr.onExec({
                if (!isBoardScene()) return;
                teammates(currentPlayer).each!((t) {
                    t.data.coins = 0;
                });
                gpr.ra.onExecOnce({
                    teammates(currentPlayer).each!((t) {
                        t.data.coins = currentPlayer.data.coins;
                    });
                });
            });
            
            data.battleRoutine.addr.onExec({
                if (!isBoardScene()) return;
                players.each!((p) {
                    teammates(p).filter!(t => t.index > p.index).each!((t) {
                        t.data.coins = 0;
                    });
                });
                gpr.ra.onExecOnce({
                    players.each!((p) {
                        teammates(p).filter!(t => t.index > p.index).each!((t) {
                            t.data.coins = p.data.coins;
                        });
                    });
                });
            });
        }

        if (config.alwaysDuel) {
            0x800FA854.onExec({ if (isBoardScene()) gpr.v0 = 1; });
        }

        if (config.randomBonus) {
            data.currentScene.onWrite((ref Scene scene) {
                if (scene != Scene.FINISH_BOARD) return;
                bonus = config.bonuses.keys.filter!(b => players.any!(p => getBonusStat(p, b) > 0)).array;
                if (bonus.length < 3) {
                    bonus = config.bonuses.keys;
                }
                if (bonus.length >= 3) {
                    bonus.randomShuffle(random);
                    info("Bonus Stars: ", bonus.take(3));
                }
            });
            data.loadBonusStat1a.addr.onExec({
                if (data.currentScene != Scene.FINISH_BOARD) return;
                if (bonus.length < 3) return;
                gpr.v1 = getBonusStat(players[gpr.s2], bonus[BonusType.MINI_GAME]);
            });
            data.loadBonusStat1b.addr.onExec({
                if (data.currentScene != Scene.FINISH_BOARD) return;
                if (bonus.length < 3) return;
                gpr.v0 = getBonusStat(players[gpr.s2], bonus[BonusType.MINI_GAME]);
            });
            data.loadBonusStat2a.addr.onExec({
                if (data.currentScene != Scene.FINISH_BOARD) return;
                if (bonus.length < 3) return;
                gpr.v1 = getBonusStat(players[gpr.s2], bonus[BonusType.COIN]);
            });
            data.loadBonusStat2b.addr.onExec({
                if (data.currentScene != Scene.FINISH_BOARD) return;
                if (bonus.length < 3) return;
                gpr.v0 = getBonusStat(players[gpr.s2], bonus[BonusType.COIN]);
            });
            data.loadBonusStat3a.addr.onExec({
                if (data.currentScene != Scene.FINISH_BOARD) return;
                if (bonus.length < 3) return;
                gpr.v1 = getBonusStat(players[gpr.s2], bonus[BonusType.HAPPENING]);
            });
            data.loadBonusStat3b.addr.onExec({
                if (data.currentScene != Scene.FINISH_BOARD) return;
                if (bonus.length < 3) return;
                gpr.v0 = getBonusStat(players[gpr.s2], bonus[BonusType.HAPPENING]);
            });
        }

        if (config.preventRepeatMiniGames || config.blockedMiniGames.length > 0) {
            data.currentScene.onWrite((ref Scene scene) {
                if (scene == Scene.START_BOARD) {
                    state.miniGameQueue.clear();
                    saveState();
                }
            });
            // Populate mini-game roulette
            0x800DFE90.onExec({
                if (!isBoardScene()) return;
                0x800DFED4.val!Instruction = NOP;
                0x800DFF40.val!Instruction = NOP;
                0x800DFF64.val!Instruction = NOP;
                0x800DFF78.val!Instruction = NOP;
                if (gpr.s0 == 0) {
                    auto type = (cast(MiniGame)gpr.v0).type;
                    auto games = [EnumMembers!MiniGame].filter!(g => g.type == type).array;
                    auto choices = games.filter!(g => !config.blockedMiniGames.canFind(g));
                    auto game = state.miniGameQueue.require(type, ShuffleQueue!MiniGame(choices, random)).next(random);
                    auto altCount = (0x80100E18 + gpr.s2).val!ubyte - 1;
                    auto roulette = game ~ games.filter!(g => g != game).array.randomShuffle(random).take(altCount);
                    roulette.randomShuffle(random).each!((i, e) => data.miniGameRoulette[i] = e);
                    0x800DF120.onExecOnce({ gpr.v0 = cast(uint)roulette.countUntil(game); });
                    saveState();
                }
                gpr.v0 = data.miniGameRoulette[gpr.s0];
            });
            // Prevent the mini-game roulette from jumping backward
            0x800DF3C0.onExec({ if (isBoardScene()) gpr.v0 = 1; });
        }

        if (config.enhancedTaunts) {
            data.storeButtonPress.addr.onExecDone({
                if (gpr.v0 == 0 || data.totalTurns == 0) return;

                SFX sfx;
                switch (data.buttons[gpr.t0]) {
                    case BUTTON.L:   sfx = SFX.TAUNT;               break;
                    case BUTTON.D_R: sfx = SFX.BEING_CHOSEN;        break;
                    case BUTTON.D_L: sfx = SFX.GETTING_AN_ITEM;     break;
                    case BUTTON.D_D: sfx = SFX.WINNING_A_STAR;      break;
                    case BUTTON.D_U: sfx = SFX.WINNING_A_MINI_GAME; break;
                    case BUTTON.C_R: sfx = SFX.DESPAIR_1;           break;
                    case BUTTON.C_L: sfx = SFX.DESPAIR_2;           break;
                    case BUTTON.C_D: sfx = SFX.LOSING_A_MINI_GAME;  break;
                    case BUTTON.C_U: sfx = SFX.LOSING_A_MINI_GAME;  break;
                    default:                                        return;
                }

                auto p = players.find!(p => p.data.controller == gpr.t0);
                if (p.empty || p.front.isCPU) return;

                data.playSFX.addr.jal(sfx, p.front.index);
            });
        }

        if (config.randomChanceOrder) {
            0x80105B58.onExec({
                if (data.currentScene != Scene.CHANCE_TIME) return;
                [0, 1, 2].randomShuffle(random).each!((i, j) => data.chanceOrder[i] = cast(ubyte)j);
            });
        }

        if (config.itemsOnFinalTurn) {
            data.currentTurn.onRead((ref ubyte turn, Address pc) {
                if (!isBoardScene()) return;
                if (turn != data.totalTurns) return;
                if (pc == 0x800FE420                       || // Item Space
                   (pc + 32).val!Instruction == 0x0C036783 || // Toad Shop
                   (pc + 32).val!Instruction == 0x0C03B164) { // Item Shop
                    turn--;
                }
            });
        }

        if (config.luckySpaceRatio > 0) {
            Ptr!Address luckySpaceTexturePtr = 0;
            Ptr!Address goldSpaceTexturePtr = 0;
            ubyte[] bSpaces, lSpaces, hSpaces;

            bool lumasPlaygroundHiddenIndex(ushort index) {
                if (getCurrentBoardName() != "Luma's Playground") return false;
                
                return index == 0xFFFF || index == 98 || index == 103 || index == 107;
            }

            bool validHiddenIndex(string exclude = null)(ushort index) {
                if (lumasPlaygroundHiddenIndex(index)) return true;
                if (index >= data.spaceCount) return false;
                if (data.spaces[index].type != Space.Type.BLUE) return false;
                if (index < state.customSpaces.length && state.customSpaces[index] == CustomSpace.LUCKY) return false;
                static if (exclude != "item") {
                    if (index == data.itemHiddenBlock) return false;
                }
                static if (exclude != "coin") {
                    if (index == data.coinHiddenBlock) return false;
                }
                static if (exclude != "star") {
                    if (index == data.starHiddenBlock) return false;
                }
                return true;
            }

            ushort randomHiddenIndex() {
                auto selection = iota(data.spaceCount).filter!(i => validHiddenIndex(i))
                                                      .filter!(i => !lumasPlaygroundHiddenIndex(i))
                                                      .array;
                return selection.empty ? cast(ushort)0xFFFF : selection.choice(random);
            }
            
            0x8003592C.onExecDone({ // Finish making temp heap
                luckySpaceTexturePtr = 0;
                goldSpaceTexturePtr = 0;
                if (!isBoardScene()) return;

                mallocTemp(LUCKY_SPACE_TEXTURE.length + 0x10, (ptr) {
                    LUCKY_SPACE_TEXTURE.each!((i, b) { Ptr!ubyte(ptr + 0x10)[i] = b; });
                    luckySpaceTexturePtr = ptr;

                    if (config.revealHiddenBlocksOnRemainingTurns > 0) {
                        mallocTemp(GOLD_SPACE_TEXTURE.length + 0x10, (ptr) {
                            GOLD_SPACE_TEXTURE.each!((i, b) { Ptr!ubyte(ptr + 0x10)[i] = b; });
                            goldSpaceTexturePtr = ptr;
                        });
                    }
                });
            });
            data.spaceTypeTexturePointers[Space.Type.UNKNOWN_1].onRead((ref Address ptr, Address pc) {
                if (!isBoardScene()) return;
                if (pc.val!Instruction != 0x8C420000) {
                    ptr = 0;
                }
            });
            data.spaceTypeTexturePointers[Space.Type.UNKNOWN_1].onWrite((ref Address ptr) {
                if (!isBoardScene()) return;
                ptr = luckySpaceTexturePtr;
            });
            if (config.revealHiddenBlocksOnRemainingTurns > 0) {
                data.spaceTypeTexturePointers[Space.Type.UNKNOWN_2].onRead((ref Address ptr, Address pc) {
                    if (!isBoardScene()) return;
                    if (pc.val!Instruction != 0x8C420000) {
                        ptr = 0;
                    }
                });
                data.spaceTypeTexturePointers[Space.Type.UNKNOWN_2].onWrite((ref Address ptr) {
                    if (!isBoardScene()) return;
                    ptr = goldSpaceTexturePtr;
                });
            }
            0x800EA4F0.onExec({ // Force high res space textures on full map view
                if (!isBoardScene()) return;
                gpr.a0 = false;
            });
            data.currentScene.onWrite((ref Scene scene) { // Reset lucky spaces at start of game
                if (scene == Scene.START_BOARD) {
                    state.customSpaces.length = 0;
                    state.players.each!(p => p.luckySpaceCount = 0);
                    saveState();
                }
            });
            0x800EAC74.onExec({ // Display lucky spaces on board
                if (!isBoardScene()) return;
                if (gpr.s3 == Space.Type.BLUE && gpr.s2 == 0) { // Cache blue and lucky space lists
                    auto blueSpaces = iota(data.spaceCount).filter!(e => data.spaces[e].type == Space.Type.BLUE).array;
                    state.customSpaces.length = data.spaceCount;
                    long newLuckyCount = roundTo!long(blueSpaces.length * min(config.luckySpaceRatio, 1.0))
                                       - state.customSpaces.count!(e => e == CustomSpace.LUCKY);
                    auto newBlues = blueSpaces.filter!(e => state.customSpaces[e] == CustomSpace.NORMAL).array.randomShuffle(random);
                    if (!newBlues.empty) {
                        newBlues.each!((i, e) => state.customSpaces[e] = (i < newLuckyCount ? CustomSpace.LUCKY : CustomSpace.BLUE));
                        saveState();
                    }
                    bSpaces.length = 0;
                    lSpaces.length = 0;
                    hSpaces.length = 0;
                    foreach (i; blueSpaces) {
                        if (data.currentTurn + config.revealHiddenBlocksOnRemainingTurns > data.totalTurns &&
                           (i == data.itemHiddenBlock || i == data.coinHiddenBlock || i == data.starHiddenBlock)) {
                            hSpaces ~= cast(ubyte)i;
                        } else if (state.customSpaces[i] == CustomSpace.LUCKY) {
                            lSpaces ~= cast(ubyte)i;
                        } else {
                            bSpaces ~= cast(ubyte)i;
                        }
                    }
                    if (config.revealHiddenBlocksOnRemainingTurns > 0) {
                        if (!validHiddenIndex!"item"(data.itemHiddenBlock)) data.itemHiddenBlock = randomHiddenIndex();
                        if (!validHiddenIndex!"coin"(data.coinHiddenBlock)) data.coinHiddenBlock = randomHiddenIndex();
                        if (!validHiddenIndex!"star"(data.starHiddenBlock)) data.starHiddenBlock = randomHiddenIndex();
                    }
                }
                if (gpr.s3 == Space.Type.BLUE) {
                    gpr.a0 = (gpr.s2 < bSpaces.length ? bSpaces[gpr.s2] : 0xFF);
                } else if (gpr.s3 == Space.Type.UNKNOWN_1) {
                    gpr.a0 = (gpr.s2 < lSpaces.length ? lSpaces[gpr.s2] : 0xFF);
                } else if (gpr.s3 == Space.Type.UNKNOWN_2 && config.revealHiddenBlocksOnRemainingTurns > 0) {
                    gpr.a0 = (gpr.s2 < hSpaces.length ? hSpaces[gpr.s2] : 0xFF);
                }
            });
            0x800FD774.onExec({ // Increment lucky space count
                if (!isBoardScene()) return;
                if (state.customSpaces[data.currentSpaceIndex] != CustomSpace.LUCKY) return;
                if (data.spaces[data.currentSpaceIndex].type != Space.Type.BLUE) return;

                gpr.v0--;
                currentPlayer.state.luckySpaceCount++;

                saveState();
            });
            0x800FE258.onExec({ // Land on lucky space
                if (!isBoardScene()) return;
                if (state.customSpaces[data.currentSpaceIndex] != CustomSpace.LUCKY) return;
                if (data.spaces[data.currentSpaceIndex].type != Space.Type.BLUE) return;

                if (uniform!"[]"(1, 3, random) == 1) {
                    gpr.v0 = Space.Type.ITEM; // 1 in 3 chance of item event on lucky space 
                }
            });
            data.blueOrRedSpaceCoins.addr.onExec({ // Give extra coins on lucky space
                if (!isBoardScene()) return;
                if (state.customSpaces[data.currentSpaceIndex] != CustomSpace.LUCKY) return;
                if (data.spaces[data.currentSpaceIndex].type != Space.Type.BLUE) return;

                switch (gpr.s0) {
                    case 3: gpr.s0 = [7, 10, 12, 15, 20].choice(random); break;
                    case 6: gpr.s0 =        [12, 15, 20].choice(random); break;
                    default: break;
                }
            });
            0x800FE478.onExec({ // Force Toad or Baby Bowser on lucky space
                if (!isBoardScene()) return;
                if (state.customSpaces[data.currentSpaceIndex] != CustomSpace.LUCKY) return;
                if (data.spaces[data.currentSpaceIndex].type != Space.Type.BLUE) return;
                
                gpr.v0 = uniform!"[]"(0, 1, random);
            });
            data.currentScene.onWrite((ref Scene scene) {
                if (scene != Scene.FINAL_RESULTS) return;
                info("Lucky Spaces:");
                players.dup.sort!((p, q) => p.data.coins > q.data.coins, SwapStrategy.stable)
                           .sort!((p, q) => p.data.stars > q.data.stars, SwapStrategy.stable)
                           .each!((p) {
                    info(format("    %-8s %2d", p.data.character.to!string ~ ":", p.state.luckySpaceCount));
                });
            });
            if (config.revealHiddenBlocksOnRemainingTurns > 0) {
                auto chooseHiddenBlockLocation = (ref ushort index) {
                    if (!isBoardScene()) return;
                    if (lumasPlaygroundHiddenIndex(index)) return;
                    index = randomHiddenIndex();
                };
                data.itemHiddenBlock.onWrite(chooseHiddenBlockLocation);
                data.coinHiddenBlock.onWrite(chooseHiddenBlockLocation);
                data.starHiddenBlock.onWrite(chooseHiddenBlockLocation);
            }
        }

        if (config.doubleCoinMiniGames) {
            immutable INTERVAL = 5;
            auto doubleCoins = (ref ushort amount) {
                if (data.currentScene != Scene.MINI_GAME_RESULTS) return;
                if ((data.currentTurn - 1) % INTERVAL == 0) {
                    amount *= 2;
                }
            };
            players.each!((p) {
                p.data.gameCoinsMain.onRead(doubleCoins);
                p.data.gameCoinsExtra.onRead(doubleCoins);
            });

            0x800FEF68.onExecDone({
                if (!isBoardScene()) return;
                if (data.currentTurn % INTERVAL != 0) return;

                showGlobalMessage("          Bonus Mini-Game!\n\n" ~
                                  "               <BOLD><YELLOW>Coins × 2<RESET><NORMAL>", 0x15);
            });
        }

        if (config.mpiqPermadeath) {
            /*
            0x8010B374.onExec({
                if (data.currentScene != Scene.MPIQ) return;
                gpr.v0 = -1; // Force all answers to be incorrect for testing purposes
            });
            */
            0x8010B5B4.onExec({
                if (data.currentScene != Scene.MPIQ) return;

                bool allNoJump = data.mpiqNoJump[0] && data.mpiqNoJump[1] &&
                                 data.mpiqNoJump[2] && data.mpiqNoJump[3];

                if (gpr.v0 == 0 && !allNoJump) {
                    gpr.v0 = 1; // Prevent jumping
                } else if (gpr.v0 == 1 && allNoJump) {
                    gpr.v0 = 0; // Allow jumping
                }
            });
        }

        if (config.finalResultsDoNotProceed) {
            0x80109348.onExec({
                if (data.currentScene != Scene.FINAL_RESULTS) return;
                gpr.v0 = input[0..$].map!(i => i.buttons << 8)
                                    .canFind!(b => (b & BUTTON.A) && (b & BUTTON.Z));
            });
        }

        if (config.improveLastFiveTurnsBonus) {
            0x80107260.onExec({ // Prevent Baby Bowser
                if (data.currentScene != Scene.LAST_FIVE_TURNS) return;
                gpr.v0 = 1;
            });

            0x80106A80.onExec({ // Prevent Whomp
                if (data.currentScene != Scene.LAST_FIVE_TURNS) return;
                gpr.v0 = 1;
            });
            
            0x80106ED4.onExec({ // Choose prize amount
                if (data.currentScene != Scene.LAST_FIVE_TURNS) return;
                lastFiveTurnsBonus = [10, 20, 20, 20, 30, 30].choice(random);
            });

            0x80106EF4.onExecDone({ // Apply prize amount
                if (data.currentScene != Scene.LAST_FIVE_TURNS) return;
                gpr.a1 = lastFiveTurnsBonus;
            });
        }

        if (config.singleUseBattleSpaces) {
            data.currentScene.onWrite((ref Scene scene) {
                if (scene == Scene.START_BOARD) {
                    state.usedBattleSpaces.length = 0;
                    saveState();
                }
            });

            data.battleRoutineComplete.addr.onExec({
                if (!isBoardScene()) return;
                if (!gpr.v0) return; // Battle cancelled
                if (data.spaces[data.currentSpaceIndex].type != Space.Type.BATTLE) return;
                if (state.usedBattleSpaces.canFind(data.currentSpaceIndex)) return;
                state.usedBattleSpaces ~= data.currentSpaceIndex;
                saveState();
            });

            0x800EAEF4.onExec({
                if (!isBoardScene()) return;
                if (gpr.v0 == Space.Type.BATTLE && state.usedBattleSpaces.canFind(gpr.s2)) {
                    gpr.v0 = Space.Type.BLUE;
                }
            });
        }

        // TODO: Not actually everything. Expand later.
        if (config.unlockEverything) {
            0x80035C00.onExecDone({ gpr.a0 |= 0xFF; });                        // Mini-Games (800CC0DE - 800CC0E5)
            0x800CC158.val!ubyte.onRead((ref ubyte flags) { flags |= 0x20; }); // Super Hard
            0x800CC159.val!ubyte.onRead((ref ubyte flags) { flags |= 0x02; }); // Waluigi's Island
        }

        if (config.mapScrollSpeedMultiplier != 1.0) {
            0x80100350.onExec({
                if (!isBoardScene()) return;

                fpr.f12 *= config.mapScrollSpeedMultiplier;
            });
        }

        if (config.increaseItemGameVariety) {
            void populateHelpScreen() {
                iota(5).map!(i => cast(Item)data.itemMiniGameItems[i])
                       .array.sort!((a, b) => a.to!string < b.to!string)
                       .each!((i, item) => data.itemMiniGameHelpScreenItems[3*i%5] = item);
            }

            0x80106CE8.onExec({
                if (data.currentScene != Scene.MINI_GAME_RULES) return;

                [EnumMembers!Item].filter!(item => item.isCommon)
                                  .array.randomShuffle(random).take(5)
                                  .each!((i, item) => data.itemMiniGameItems[i] = item);

                populateHelpScreen();
            });

            0x80106E90.onExec({
                if (data.currentScene != Scene.MINI_GAME_RULES) return;

                populateHelpScreen();
            });
        }

        if (config.increaseItemShopVariety) {
            int phase = -1;
            int rank  = -1;

            data.currentTurn.onRead((ref ubyte turn, Address pc) {
                if (!isBoardScene()) return;
                if ((pc + 32).val!Instruction != 0x0C03B164) return; // Not item shop

                phase = -1;
                rank  = -1;
            });

            0x800EEA50.onExec({ // Return player rank
                if (!isBoardScene()) return;

                if ((gpr.ra + 12).val!Instruction != 0x00041840) return; // Not item shop
                if ((gpr.ra + 16).val!Instruction != 0x00641821) return; // Not item shop
                if ((gpr.ra + 20).val!Instruction != 0x00031880) return; // Not item shop
                if ((gpr.ra + 24).val!Instruction != 0x00651821) return; // Not item shop

                if (phase == -1 && rank == -1) {
                    phase = gpr.s1;
                    rank  = gpr.v0;

                    if (uniform!"[]"(1, 3, random) == 1) {
                        switch (phase) {
                            case GamePhase.EARLY: phase = GamePhase.MID;                                   break;
                            case GamePhase.MID:   phase = [GamePhase.EARLY, GamePhase.END].choice(random); break;
                            case GamePhase.END:   phase = GamePhase.MID;                                   break;
                            default:                                                                       break;
                        }
                    }

                    if (uniform!"[]"(1, 3, random) == 1) {
                        switch (phase) {
                            case GamePhase.MID: rank = [0, 1]   .remove(min(rank, 1)).choice(random); break;
                            case GamePhase.END: rank = [0, 1, 2].remove(min(rank, 2)).choice(random); break;
                            default:                                                                  break;
                        }
                    }
                }

                gpr.s1 = phase;
                gpr.v0 = rank;
            });
        }

        if (config.toadShopChance >= 0) {
            Address[][Scene] shopTypeAddress;
            0x800ECEDC.onExec({ // return RNGPercentChance
                if (!isBoardScene()) return;
                if (data.currentScene !in shopTypeAddress) {
                    shopTypeAddress[data.currentScene] = searchMemory([0x0C03B3A7, 0x24040042, 0x00021400, 0x2C420001]);
                }
                if (shopTypeAddress[data.currentScene].canFind(gpr.ra - 8)) {
                    gpr.v0 = random.uniform01() < config.toadShopChance;
                }
            });
        }

        if (config.replaceWackyWatch) {
            players.each!((p) {
                foreach (i; iota(3)) {
                    p.data.items[i].onWrite((ref Item item) {
                        if (item == Item.WACKY_WATCH) {
                            item = [Item.KOOPA_KARD, Item.BARTER_BOX, Item.LUCKY_CHARM].choice(random);
                        }
                    });
                }
            });
        }
    }
}

extern (C) {
    string getName() {
        return "Mario Party 3";
    }

    int startup() {
        pluginFactory = (name, hash) => new MarioParty3(name, hash);

        return 0;
    }
}

enum CustomSpace : byte {
    NORMAL = 0,
    BLUE   = 1,
    LUCKY  = 2
}

enum Item : byte {
    NONE             =   -1,
    MUSHROOM         = 0x00,
    SKELETON_KEY     = 0x01,
    POISON_MUSHROOM  = 0x02,
    REVERSE_MUSHROOM = 0x03,
    CELLULAR_SHOPPER = 0x04,
    WARP_BLOCK       = 0x05,
    PLUNDER_CHEST    = 0x06,
    BOWSER_PHONE     = 0x07,
    DUELING_GLOVE    = 0x08,
    LUCKY_LAMP       = 0x09,
    GOLDEN_MUSHROOM  = 0x0A,
    BOO_BELL         = 0x0B,
    BOO_REPELLANT    = 0x0C,
    BOWSER_SUIT      = 0x0D,
    MAGIC_LAMP       = 0x0E,
    KOOPA_KARD       = 0x0F,
    BARTER_BOX       = 0x10,
    LUCKY_CHARM      = 0x11,
    WACKY_WATCH      = 0x12
}

enum Scene : uint {
    BOOT                     =   0,
    HAND_LINE_AND_SINKER     =   1,
    COCONUT_CONK             =   2,
    SPOTLIGHT_SWIM           =   3,
    BOULDER_BALL             =   4,
    CRAZY_COGS               =   5,
    HIDE_AND_SNEAK           =   6,
    RIDICULOUS_RELAY         =   7,
    THWOMP_PULL              =   8,
    RIVER_RAIDERS            =   9,
    TIDAL_TOSS               =  10,
    EATSA_PIZZA              =  11,
    BABY_BOWSER_BROADSIDE    =  12,
    PUMP_PUMP_AND_AWAY       =  13,
    HYPER_HYDRANTS           =  14,
    PICKING_PANIC            =  15,
    COSMIC_COASTER           =  16,
    PUDDLE_PADDLE            =  17,
    ETCH_N_CATCH             =  18,
    LOG_JAM                  =  19,
    SLOT_SYNCH               =  20,
    TREADMILL_GRILL          =  21,
    TOADSTOOL_TITAN          =  22,
    ACES_HIGH                =  23,
    BOUNCE_N_TROUNCE         =  24,
    ICE_RINK_RISK            =  25,
    LOCKED_OUT               =  26,
    CHIP_SHOT_CHALLENGE      =  27,
    PARASOL_PLUMMET          =  28,
    MESSY_MEMORY             =  29,
    PICTURE_IMPERFECT        =  30,
    MARIOS_PUZZLE_PARTY      =  31,
    THE_BEAT_GOES_ON         =  32,
    MPIQ                     =  33,
    CURTAIN_CALL             =  34,
    WATER_WHIRLED            =  35,
    FRIGID_BRIDGES           =  36,
    AWFUL_TOWER              =  37,
    CHEEP_CHEEP_CHASE        =  38,
    PIPE_CLEANERS            =  39,
    SNOWBALL_SUMMIT          =  40,
    ALL_FIRED_UP             =  41,
    STACKED_DECK             =  42,
    THREE_DOOR_MONTY         =  43,
    ROCKIN_RACEWAY           =  44,
    MERRY_GO_CHOMP           =  45,
    SLAP_DOWN                =  46,
    STORM_CHASERS            =  47,
    EYE_SORE                 =  48,
    VINE_WITH_ME             =  49,
    POPGUN_PICK_OFF          =  50,
    END_OF_THE_LINE          =  51,
    BOWSER_TOSS              =  52,
    BABY_BOWSER_BONKERS      =  53,
    MOTOR_ROOTER             =  54,
    SILLY_SCREWS             =  55,
    CROWD_COVER              =  56,
    TICK_TOCK_HOP            =  57,
    FOWL_PLAY                =  58,
    WINNERS_WHEEL            =  59,
    HEY_BATTER_BATTER        =  60,
    BOBBING_BOW_LOONS        =  61,
    DORRIE_DIP               =  62,
    SWINGING_WITH_SHARKS     =  63,
    SWING_N_SWIPE            =  64,
    STARDUST_BATTLE          =  65,
    GAME_GUYS_ROULETTE       =  66,
    GAME_GUYS_LUCKY_7        =  67,
    GAME_GUYS_MAGIC_BOXES    =  68,
    GAME_GUYS_SWEET_SURPRISE =  69,
    DIZZY_DINGHIES           =  70,
    TRANSITION               =  71,
    CHILLY_WATERS_BOARD      =  72,
    DEEP_BLOOBER_SEA_BOARD   =  73,
    SPINY_DESERT_BOARD       =  74,
    WOODY_WOODS_BOARD        =  75,
    CREEPY_CAVERN_BOARD      =  76,
    WALUIGIS_ISLAND_BOARD    =  77,
    FINISH_BOARD             =  79,
    BOWSER_EVENT             =  80,
    LAST_FIVE_TURNS          =  81,
    GENIE                    =  82,
    START_BOARD              =  83,
    FINAL_RESULTS            =  85,
    OPENING_CREDITS          =  88,
    GATE_GUY_BOARD           =  91,
    ARROWHEAD_BOARD          =  92,
    PIPESQUEAK_BOARD         =  93,
    BLOWHARD_BOARD           =  94,
    MR_MOVER_BOARD           =  95,
    BACKTRACK_BOARD          =  96,
    MINI_GAME_ROOM_RETRY     = 104,
    MINI_GAME_ROOM           = 105,
    CHANCE_TIME              = 106,
    MINI_GAME_RULES          = 112,
    MINI_GAME_RESULTS        = 113,
    GAMBLE_GAME_RESULTS      = 114,
    BATTLE_GAME_RESULTS      = 116,
    CASTLE_GROUNDS           = 119,
    GAME_SETUP               = 120,
    FILE_SELECTION           = 121,
    TITLE_SCREEN             = 122,
    PEACHS_CASTLE            = 123
}

enum MiniGame : ubyte {
    HAND_LINE_AND_SINKER     =  1,
    COCONUT_CONK             =  2,
    SPOTLIGHT_SWIM           =  3,
    BOULDER_BALL             =  4,
    CRAZY_COGS               =  5,
    HIDE_AND_SNEAK           =  6,
    RIDICULOUS_RELAY         =  7,
    THWOMP_PULL              =  8,
    RIVER_RAIDERS            =  9,
    TIDAL_TOSS               = 10,
    EATSA_PIZZA              = 11,
    BABY_BOWSER_BROADSIDE    = 12,
    PUMP_PUMP_AND_AWAY       = 13,
    HYPER_HYDRANTS           = 14,
    PICKING_PANIC            = 15,
    COSMIC_COASTER           = 16,
    PUDDLE_PADDLE            = 17,
    ETCH_N_CATCH             = 18,
    LOG_JAM                  = 19,
    SLOT_SYNCH               = 20,
    TREADMILL_GRILL          = 21,
    TOADSTOOL_TITAN          = 22,
    ACES_HIGH                = 23,
    BOUNCE_N_TROUNCE         = 24,
    ICE_RINK_RISK            = 25,
    LOCKED_OUT               = 26,
    CHIP_SHOT_CHALLENGE      = 27,
    PARASOL_PLUMMET          = 28,
    MESSY_MEMORY             = 29,
    PICTURE_IMPERFECT        = 30,
    MARIOS_PUZZLE_PARTY      = 31,
    THE_BEAT_GOES_ON         = 32,
    MPIQ                     = 33,
    CURTAIN_CALL             = 34,
    WATER_WHIRLED            = 35,
    FRIGID_BRIDGES           = 36,
    AWFUL_TOWER              = 37,
    CHEEP_CHEEP_CHASE        = 38,
    PIPE_CLEANERS            = 39,
    SNOWBALL_SUMMIT          = 40,
    ALL_FIRED_UP             = 41,
    STACKED_DECK             = 42,
    THREE_DOOR_MONTY         = 43,
    ROCKIN_RACEWAY           = 44,
    MERRY_GO_CHOMP           = 45,
    SLAP_DOWN                = 46,
    STORM_CHASERS            = 47,
    EYE_SORE                 = 48,
    VINE_WITH_ME             = 49,
    POPGUN_PICK_OFF          = 50,
    END_OF_THE_LINE          = 51,
    BOWSER_TOSS              = 52,
    BABY_BOWSER_BONKERS      = 53,
    MOTOR_ROOTER             = 54,
    SILLY_SCREWS             = 55,
    CROWD_COVER              = 56,
    TICK_TOCK_HOP            = 57,
    FOWL_PLAY                = 58,
    WINNERS_WHEEL            = 59,
    HEY_BATTER_BATTER        = 60,
    BOBBING_BOW_LOONS        = 61,
    DORRIE_DIP               = 62,
    SWINGING_WITH_SHARKS     = 63,
    SWING_N_SWIPE            = 64,
    CHANCE_TIME              = 65,
    STARDUST_BATTLE          = 66,
    GAME_GUYS_ROULETTE       = 67,
    GAME_GUYS_LUCKY_7        = 68,
    GAME_GUYS_MAGIC_BOXES    = 69,
    GAME_GUYS_SWEET_SURPRISE = 70,
    DIZZY_DINGHIES           = 71,
    MARIOS_PUZZLE_PARTY_PRO  = 72,
}

enum MiniGameType {
    ONE_V_THREE,
    TWO_V_TWO,
    FOUR_PLAYER,
    BATTLE,
    DUEL,
    ITEM,
    GAMBLE,
    SPECIAL
}

enum BonusType {
    MINI_GAME,
    COIN,
    HAPPENING,
    RED,
    BLUE,
    CHANCE,
    BOWSER,
    BATTLE,
    ITEM,
    BANK,
    GAME_GUY,
    LUCKY
}

enum BowserEventType : int {
    UNKNOWN           = -1,
    COINS_FOR_BOWSER  =  0,
    COIN_POTLUCK      =  1,
    SUIT_GIVEAWAY     =  2,
    PHONE_GIVEAWAY    =  3,
    CURSE             =  4,
    REVERSE_CURSE     =  5,
    SHUFFLE           =  6,
    REVOLUTION        =  7,
    BOWSER_RAN_AWAY_1 =  8,
    BOWSER_RAN_AWAY_2 =  9
}

enum SFX {
    WINNING_A_STAR       = 0x0262,
    LOSING_A_MINI_GAME   = 0x026B,
    GETTING_AN_ITEM      = 0x0274,
    WINNING_A_BOARD_GAME = 0x027D,
    DESPAIR_1            = 0x0286,
    WINNING_A_MINI_GAME  = 0x028F,
    DESPAIR_2            = 0x02AB,
    BEING_CHOSEN         = 0x02B4,
    TAUNT                = 0x02BD,
    SUPERSTAR            = 0x02C6
}

enum GamePhase {
    EARLY = 0,
    MID   = 1,
    END   = 2
}

MiniGameType type(MiniGame game) {
    switch (game) {
        case 26: return MiniGameType.BATTLE;
        case 44: return MiniGameType.FOUR_PLAYER;
        default:
    }

    switch (game) {
        case  1: .. case 10: return MiniGameType.ONE_V_THREE;
        case 11: .. case 20: return MiniGameType.TWO_V_TWO;
        case 21: .. case 40: return MiniGameType.FOUR_PLAYER;
        case 41: .. case 48: return MiniGameType.BATTLE;
        case 49: .. case 58: return MiniGameType.DUEL;
        case 59: .. case 64: return MiniGameType.ITEM;
        case 67: .. case 70: return MiniGameType.GAMBLE;
        default:             return MiniGameType.SPECIAL;
    }
}

bool isValid(Item item) {
    return Item.MUSHROOM <= item && item <= Item.WACKY_WATCH;
}

bool isCommon(Item item) {
    return Item.MUSHROOM <= item && item <= Item.MAGIC_LAMP;
}

bool isRare(Item item) {
    return Item.KOOPA_KARD <= item && item <= Item.WACKY_WATCH;
}

immutable ubyte[] LUCKY_SPACE_TEXTURE = [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x88, 0x81, 0x37, 0x00, 0x88, 0x9a, 0x37, 0x00, 0x88, 0xa1,
    0x37, 0x00, 0x88, 0xa2, 0x37, 0x00, 0x88, 0xa2, 0x37, 0x00, 0x88, 0xa2, 0x37, 0x00, 0x88, 0xa2,
    0x37, 0x00, 0x88, 0xa2, 0x37, 0x00, 0x88, 0xa2, 0x37, 0x00, 0x88, 0xa2, 0x37, 0x00, 0x88, 0xa2,
    0x37, 0x00, 0x88, 0xa1, 0x37, 0x00, 0x88, 0x9a, 0x37, 0x00, 0x88, 0x81, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x37, 0x00, 0x88, 0x96, 0x37, 0x00, 0x88, 0xc6, 0x71, 0x8f, 0xb0, 0xdb, 0x71, 0x8f, 0xb0, 0xe0,
    0x71, 0x8f, 0xb0, 0xe1, 0x71, 0x8f, 0xb0, 0xe1, 0x71, 0x8f, 0xb0, 0xe1, 0x71, 0x8f, 0xb0, 0xe1,
    0x71, 0x8f, 0xb0, 0xe1, 0x71, 0x8f, 0xb0, 0xe1, 0x71, 0x8f, 0xb0, 0xe1, 0x71, 0x8f, 0xb0, 0xe1,
    0x71, 0x8f, 0xb0, 0xe0, 0x71, 0x8f, 0xb0, 0xdb, 0x37, 0x00, 0x88, 0xc6, 0x37, 0x00, 0x88, 0x96,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x88, 0x99,
    0x37, 0x00, 0x88, 0xce, 0xf8, 0xf2, 0xc7, 0xeb, 0xf8, 0xf2, 0xc7, 0xf6, 0xf8, 0xf2, 0xc7, 0xf8,
    0xf8, 0xf2, 0xc7, 0xf9, 0xf8, 0xf2, 0xc7, 0xf9, 0xf8, 0xf2, 0xc7, 0xf9, 0xf8, 0xf2, 0xc7, 0xf9,
    0xf8, 0xf2, 0xc7, 0xf9, 0xf8, 0xf2, 0xc7, 0xf9, 0xf8, 0xf2, 0xc7, 0xf9, 0xf8, 0xf2, 0xc7, 0xf9,
    0xf8, 0xf2, 0xc7, 0xf8, 0xf8, 0xf2, 0xc7, 0xf6, 0xf8, 0xf2, 0xc7, 0xeb, 0x37, 0x00, 0x88, 0xce,
    0x37, 0x00, 0x88, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x88, 0x99, 0x37, 0x00, 0x88, 0xce,
    0xf8, 0xf2, 0xc7, 0xec, 0xf8, 0xf2, 0xc8, 0xf8, 0x05, 0x05, 0x53, 0xfc, 0x05, 0x05, 0x53, 0xfd,
    0x07, 0x07, 0x5c, 0xfd, 0x07, 0x07, 0x60, 0xfd, 0x07, 0x07, 0x65, 0xfd, 0x07, 0x07, 0x69, 0xfd,
    0x07, 0x07, 0x69, 0xfd, 0x07, 0x07, 0x65, 0xfd, 0x07, 0x07, 0x60, 0xfd, 0x07, 0x07, 0x5c, 0xfd,
    0x05, 0x05, 0x53, 0xfd, 0x05, 0x05, 0x53, 0xfc, 0xf8, 0xf2, 0xc8, 0xf8, 0xf8, 0xf2, 0xc7, 0xec,
    0x37, 0x00, 0x88, 0xce, 0x37, 0x00, 0x88, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x88, 0x99, 0x37, 0x00, 0x88, 0xce, 0xf8, 0xf2, 0xc7, 0xed,
    0xf8, 0xf2, 0xc8, 0xf9, 0x05, 0x05, 0x53, 0xfc, 0x08, 0x08, 0x5e, 0xfd, 0x09, 0x09, 0x68, 0xfd,
    0x0a, 0x0a, 0x72, 0xfd, 0x0b, 0x0b, 0x78, 0xfd, 0x0c, 0x0c, 0x7d, 0xfd, 0x0c, 0x0c, 0x82, 0xfd,
    0x0c, 0x0c, 0x82, 0xfd, 0x0c, 0x0c, 0x7d, 0xfd, 0x0b, 0x0b, 0x78, 0xfd, 0x0a, 0x0a, 0x72, 0xfd,
    0x09, 0x09, 0x68, 0xfd, 0x08, 0x08, 0x5e, 0xfd, 0x05, 0x05, 0x53, 0xfc, 0xf8, 0xf2, 0xc8, 0xf9,
    0xf8, 0xf2, 0xc7, 0xed, 0x37, 0x00, 0x88, 0xce, 0x37, 0x00, 0x88, 0x99, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x37, 0x00, 0x88, 0x99, 0x37, 0x00, 0x88, 0xce, 0xf8, 0xf2, 0xc7, 0xed, 0xf8, 0xf2, 0xc8, 0xf9,
    0x07, 0x07, 0x56, 0xfc, 0x09, 0x09, 0x66, 0xfd, 0x0c, 0x0c, 0x73, 0xfd, 0x0e, 0x0e, 0x7e, 0xfd,
    0x10, 0x10, 0x88, 0xfd, 0x12, 0x12, 0x90, 0xfd, 0x12, 0x12, 0x94, 0xfd, 0x13, 0x13, 0x97, 0xfd,
    0x13, 0x13, 0x97, 0xfd, 0x12, 0x12, 0x94, 0xfd, 0x12, 0x12, 0x90, 0xfd, 0x10, 0x10, 0x88, 0xfd,
    0x0e, 0x0e, 0x7e, 0xfd, 0x0c, 0x0c, 0x73, 0xfd, 0x09, 0x09, 0x66, 0xfd, 0x07, 0x07, 0x56, 0xfc,
    0xf8, 0xf2, 0xc8, 0xf9, 0xf8, 0xf2, 0xc7, 0xed, 0x37, 0x00, 0x88, 0xce, 0x37, 0x00, 0x88, 0x99,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x88, 0x99,
    0x37, 0x00, 0x88, 0xce, 0xf8, 0xf2, 0xc7, 0xed, 0xf8, 0xf2, 0xc8, 0xf9, 0x08, 0x08, 0x5a, 0xfc,
    0x0c, 0x0c, 0x6b, 0xfd, 0x0e, 0x0e, 0x7a, 0xfd, 0x12, 0x12, 0x89, 0xfd, 0x15, 0x15, 0x93, 0xfd,
    0x18, 0x18, 0x9c, 0xfd, 0x19, 0x19, 0xa1, 0xfd, 0x1b, 0x1a, 0xa6, 0xfd, 0x1d, 0x1c, 0xa8, 0xfd,
    0x1e, 0x23, 0xa2, 0xfd, 0x5a, 0x5f, 0x9f, 0xfe, 0x8f, 0x94, 0xb2, 0xff, 0x93, 0x98, 0xb4, 0xff,
    0x68, 0x6e, 0x9d, 0xfe, 0x1b, 0x24, 0x87, 0xfd, 0x0e, 0x0e, 0x7a, 0xfd, 0x0c, 0x0c, 0x6b, 0xfd,
    0x08, 0x08, 0x5a, 0xfc, 0xf8, 0xf2, 0xc8, 0xf9, 0xf8, 0xf2, 0xc7, 0xed, 0x37, 0x00, 0x88, 0xce,
    0x37, 0x00, 0x88, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x88, 0x99, 0x37, 0x00, 0x88, 0xce,
    0xf8, 0xf2, 0xc7, 0xed, 0xf8, 0xf2, 0xc8, 0xf9, 0x08, 0x08, 0x57, 0xfc, 0x0b, 0x0b, 0x6b, 0xfd,
    0x10, 0x10, 0x7d, 0xfd, 0x14, 0x14, 0x8d, 0xfd, 0x19, 0x19, 0x99, 0xfd, 0x1e, 0x1d, 0xa4, 0xfd,
    0x23, 0x22, 0xac, 0xfd, 0x26, 0x25, 0xb1, 0xfd, 0x27, 0x26, 0xb4, 0xfd, 0x29, 0x2f, 0xab, 0xfd,
    0x94, 0x98, 0xb8, 0xff, 0xe7, 0xe7, 0xec, 0xff, 0xed, 0xed, 0xf2, 0xff, 0xec, 0xec, 0xf0, 0xff,
    0xec, 0xed, 0xf1, 0xff, 0xa5, 0xa8, 0xbf, 0xff, 0x20, 0x2b, 0x8a, 0xfe, 0x10, 0x10, 0x7d, 0xfd,
    0x0b, 0x0b, 0x6b, 0xfd, 0x08, 0x08, 0x57, 0xfc, 0xf8, 0xf2, 0xc8, 0xf9, 0xf8, 0xf2, 0xc7, 0xed,
    0x37, 0x00, 0x88, 0xce, 0x37, 0x00, 0x88, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x88, 0x96, 0x37, 0x00, 0x88, 0xce, 0xf8, 0xf2, 0xc7, 0xed,
    0xf8, 0xf2, 0xc8, 0xf9, 0x08, 0x08, 0x55, 0xfc, 0x0b, 0x0b, 0x67, 0xfd, 0x10, 0x10, 0x7a, 0xfd,
    0x15, 0x15, 0x8d, 0xfd, 0x1c, 0x1b, 0x9d, 0xfd, 0x23, 0x22, 0xa8, 0xfd, 0x29, 0x2f, 0xa8, 0xfd,
    0x50, 0x55, 0xaa, 0xfe, 0x4f, 0x55, 0xad, 0xfe, 0x32, 0x38, 0xb0, 0xfe, 0x84, 0x88, 0xb5, 0xff,
    0xee, 0xee, 0xf2, 0xff, 0xc5, 0xc6, 0xd4, 0xff, 0x78, 0x7f, 0x9e, 0xff, 0x6f, 0x76, 0x96, 0xff,
    0xb4, 0xb6, 0xc6, 0xff, 0xec, 0xed, 0xf1, 0xff, 0x70, 0x76, 0xa3, 0xfe, 0x15, 0x17, 0x8c, 0xfd,
    0x10, 0x10, 0x7a, 0xfd, 0x0b, 0x0b, 0x67, 0xfd, 0x08, 0x08, 0x55, 0xfc, 0xf8, 0xf2, 0xc8, 0xf9,
    0xf8, 0xf2, 0xc7, 0xed, 0x37, 0x00, 0x88, 0xce, 0x37, 0x00, 0x88, 0x96, 0x00, 0x00, 0x00, 0x00,
    0x37, 0x00, 0x88, 0x81, 0x37, 0x00, 0x88, 0xc5, 0xf8, 0xf2, 0xc7, 0xeb, 0xf8, 0xf2, 0xc8, 0xf9,
    0x07, 0x07, 0x54, 0xfc, 0x0a, 0x0a, 0x5f, 0xfd, 0x0e, 0x0e, 0x74, 0xfd, 0x15, 0x15, 0x8a, 0xfd,
    0x1d, 0x1c, 0x9b, 0xfd, 0x25, 0x24, 0xa9, 0xfd, 0x2f, 0x34, 0xaa, 0xfd, 0xa1, 0xa5, 0xbf, 0xff,
    0xe7, 0xe8, 0xed, 0xff, 0xe6, 0xe7, 0xed, 0xff, 0xae, 0xb1, 0xc5, 0xff, 0xd8, 0xd9, 0xe2, 0xff,
    0xd7, 0xd8, 0xe1, 0xff, 0xb2, 0xb5, 0xc7, 0xff, 0xe6, 0xe8, 0xed, 0xff, 0xe7, 0xe8, 0xec, 0xff,
    0xa4, 0xa8, 0xbd, 0xff, 0x88, 0x8d, 0xac, 0xff, 0x47, 0x4e, 0x9e, 0xfe, 0x1d, 0x1c, 0x9b, 0xfd,
    0x15, 0x15, 0x8a, 0xfd, 0x0e, 0x0e, 0x74, 0xfd, 0x0a, 0x0a, 0x5f, 0xfd, 0x07, 0x07, 0x54, 0xfc,
    0xf8, 0xf2, 0xc8, 0xf9, 0xf8, 0xf2, 0xc7, 0xeb, 0x37, 0x00, 0x88, 0xc5, 0x37, 0x00, 0x88, 0x81,
    0x37, 0x00, 0x88, 0x99, 0x71, 0x8f, 0xb0, 0xdb, 0xf8, 0xf2, 0xc8, 0xf6, 0x06, 0x06, 0x53, 0xfc,
    0x08, 0x08, 0x55, 0xfd, 0x0d, 0x0d, 0x6a, 0xfd, 0x14, 0x14, 0x81, 0xfd, 0x1b, 0x1a, 0x95, 0xfd,
    0x24, 0x23, 0xa6, 0xfd, 0x2c, 0x2f, 0xad, 0xfd, 0x5a, 0x62, 0xa6, 0xfe, 0xea, 0xeb, 0xf0, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xfc, 0xfd, 0xff, 0xf9, 0xf9, 0xfb, 0xff,
    0xcb, 0xcd, 0xd9, 0xff, 0xf9, 0xfa, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xe9, 0xea, 0xef, 0xff, 0x58, 0x61, 0x9e, 0xfe, 0x2c, 0x2f, 0xad, 0xfd, 0x24, 0x23, 0xa6, 0xfd,
    0x1b, 0x1a, 0x95, 0xfd, 0x14, 0x14, 0x81, 0xfd, 0x0d, 0x0d, 0x6a, 0xfd, 0x08, 0x08, 0x55, 0xfd,
    0x06, 0x06, 0x53, 0xfc, 0xf8, 0xf2, 0xc8, 0xf6, 0x71, 0x8f, 0xb0, 0xdb, 0x37, 0x00, 0x88, 0x99,
    0x37, 0x00, 0x88, 0xa0, 0x71, 0x8f, 0xb0, 0xe0, 0xf8, 0xf2, 0xc8, 0xf9, 0x07, 0x07, 0x54, 0xfd,
    0x0a, 0x0a, 0x5e, 0xfd, 0x10, 0x10, 0x75, 0xfd, 0x17, 0x17, 0x8b, 0xfd, 0x21, 0x20, 0x9f, 0xfd,
    0x35, 0x3d, 0xa3, 0xfe, 0x9c, 0xa0, 0xbd, 0xff, 0xd1, 0xd3, 0xdd, 0xff, 0xfa, 0xfb, 0xfc, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xf2, 0xf5, 0xff,
    0xe2, 0xe3, 0xe9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xfb, 0xfb, 0xfc, 0xff, 0xd2, 0xd3, 0xde, 0xff, 0x9b, 0x9f, 0xbc, 0xff, 0x34, 0x3b, 0xa4, 0xfe,
    0x21, 0x20, 0x9f, 0xfd, 0x17, 0x17, 0x8b, 0xfd, 0x10, 0x10, 0x75, 0xfd, 0x0a, 0x0a, 0x5e, 0xfd,
    0x07, 0x07, 0x54, 0xfd, 0xf8, 0xf2, 0xc8, 0xf9, 0x71, 0x8f, 0xb0, 0xe0, 0x37, 0x00, 0x88, 0xa0,
    0x37, 0x00, 0x88, 0xa1, 0x71, 0x8f, 0xb0, 0xe1, 0xf8, 0xf2, 0xc8, 0xf9, 0x07, 0x07, 0x54, 0xfd,
    0x0c, 0x0c, 0x62, 0xfd, 0x12, 0x12, 0x7b, 0xfd, 0x1b, 0x1a, 0x94, 0xfd, 0x26, 0x25, 0xa6, 0xfd,
    0x8b, 0x8e, 0xb2, 0xff, 0xf7, 0xf7, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xea, 0xeb, 0xef, 0xff,
    0xe7, 0xe8, 0xed, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xf7, 0xf9, 0xff, 0x8b, 0x90, 0xb3, 0xff,
    0x26, 0x25, 0xa6, 0xfd, 0x1b, 0x1a, 0x94, 0xfd, 0x12, 0x12, 0x7b, 0xfd, 0x0c, 0x0c, 0x62, 0xfd,
    0x07, 0x07, 0x54, 0xfd, 0xf8, 0xf2, 0xc8, 0xf9, 0x71, 0x8f, 0xb0, 0xe1, 0x37, 0x00, 0x88, 0xa1,
    0x37, 0x00, 0x88, 0xa1, 0x71, 0x8f, 0xb0, 0xe1, 0xf8, 0xf2, 0xc8, 0xf9, 0x09, 0x09, 0x55, 0xfd,
    0x0e, 0x0e, 0x68, 0xfd, 0x15, 0x15, 0x81, 0xfd, 0x1f, 0x1e, 0x99, 0xfd, 0x2a, 0x29, 0xab, 0xfd,
    0xa2, 0xa5, 0xba, 0xff, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xea, 0xeb, 0xf0, 0xff,
    0xe9, 0xea, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xff, 0xff, 0xa3, 0xa8, 0xbe, 0xff,
    0x2a, 0x29, 0xab, 0xfd, 0x1f, 0x1e, 0x99, 0xfd, 0x15, 0x15, 0x81, 0xfd, 0x0e, 0x0e, 0x68, 0xfd,
    0x09, 0x09, 0x55, 0xfd, 0xf8, 0xf2, 0xc8, 0xf9, 0x71, 0x8f, 0xb0, 0xe1, 0x37, 0x00, 0x88, 0xa1,
    0x37, 0x00, 0x88, 0xa1, 0x71, 0x8f, 0xb0, 0xe1, 0xf8, 0xf2, 0xc8, 0xf9, 0x0a, 0x0a, 0x56, 0xfd,
    0x0f, 0x0f, 0x6d, 0xfd, 0x16, 0x16, 0x86, 0xfd, 0x21, 0x20, 0x9c, 0xfd, 0x2e, 0x2d, 0xae, 0xfd,
    0x6f, 0x75, 0xac, 0xfe, 0xec, 0xed, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf4, 0xf5, 0xf8, 0xff,
    0xf2, 0xf3, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xeb, 0xec, 0xf0, 0xff, 0x70, 0x75, 0xaf, 0xfe,
    0x2e, 0x2d, 0xae, 0xfd, 0x21, 0x20, 0x9c, 0xfd, 0x16, 0x16, 0x86, 0xfd, 0x0f, 0x0f, 0x6d, 0xfd,
    0x0a, 0x0a, 0x56, 0xfd, 0xf8, 0xf2, 0xc8, 0xf9, 0x71, 0x8f, 0xb0, 0xe1, 0x37, 0x00, 0x88, 0xa1,
    0x37, 0x00, 0x88, 0xa1, 0x71, 0x8f, 0xb0, 0xe1, 0xf8, 0xf2, 0xc8, 0xf9, 0x0a, 0x0a, 0x56, 0xfd,
    0x0f, 0x0f, 0x6f, 0xfd, 0x17, 0x17, 0x87, 0xfd, 0x22, 0x21, 0x9d, 0xfd, 0x2f, 0x2e, 0xb0, 0xfd,
    0x3c, 0x3f, 0xb5, 0xfd, 0x8c, 0x90, 0xb8, 0xff, 0xdb, 0xdc, 0xe4, 0xff, 0xef, 0xef, 0xf3, 0xff,
    0xf3, 0xf3, 0xf6, 0xff, 0xf6, 0xf6, 0xf8, 0xff, 0xf9, 0xfa, 0xfb, 0xff, 0xfe, 0xfe, 0xff, 0xff,
    0xfe, 0xfe, 0xfe, 0xff, 0xf9, 0xfa, 0xfb, 0xff, 0xf6, 0xf6, 0xf8, 0xff, 0xf3, 0xf4, 0xf6, 0xff,
    0xef, 0xef, 0xf3, 0xff, 0xdb, 0xdb, 0xe3, 0xff, 0x8a, 0x8e, 0xb8, 0xff, 0x3c, 0x3f, 0xb5, 0xfd,
    0x2f, 0x2e, 0xb0, 0xfd, 0x22, 0x21, 0x9d, 0xfd, 0x17, 0x17, 0x87, 0xfd, 0x0f, 0x0f, 0x6f, 0xfd,
    0x0a, 0x0a, 0x56, 0xfd, 0xf8, 0xf2, 0xc8, 0xf9, 0x71, 0x8f, 0xb0, 0xe1, 0x37, 0x00, 0x88, 0xa1,
    0x37, 0x00, 0x88, 0xa1, 0x71, 0x8f, 0xb0, 0xe1, 0xf8, 0xf2, 0xc8, 0xf9, 0x0a, 0x0a, 0x56, 0xfd,
    0x0f, 0x0f, 0x6f, 0xfd, 0x17, 0x17, 0x87, 0xfd, 0x22, 0x21, 0x9d, 0xfd, 0x2f, 0x2e, 0xb0, 0xfd,
    0x3f, 0x3f, 0xbc, 0xfd, 0x54, 0x5b, 0xa9, 0xfe, 0x9f, 0xa3, 0xb8, 0xff, 0xca, 0xcc, 0xd7, 0xff,
    0xd7, 0xd9, 0xe1, 0xff, 0xe2, 0xe3, 0xea, 0xff, 0xf0, 0xf0, 0xf4, 0xff, 0xfe, 0xfe, 0xfe, 0xff,
    0xfe, 0xfe, 0xfe, 0xff, 0xef, 0xf0, 0xf4, 0xff, 0xe1, 0xe3, 0xea, 0xff, 0xd7, 0xd8, 0xe1, 0xff,
    0xca, 0xcc, 0xd7, 0xff, 0x9f, 0xa2, 0xb9, 0xff, 0x53, 0x59, 0xaa, 0xfe, 0x3f, 0x3f, 0xbc, 0xfd,
    0x2f, 0x2e, 0xb0, 0xfd, 0x22, 0x21, 0x9d, 0xfd, 0x17, 0x17, 0x87, 0xfd, 0x0f, 0x0f, 0x6f, 0xfd,
    0x0a, 0x0a, 0x56, 0xfd, 0xf8, 0xf2, 0xc8, 0xf9, 0x71, 0x8f, 0xb0, 0xe1, 0x37, 0x00, 0x88, 0xa1,
    0x37, 0x00, 0x88, 0xa1, 0x71, 0x8f, 0xb0, 0xe1, 0xf8, 0xf2, 0xc8, 0xf9, 0x0a, 0x0a, 0x56, 0xfd,
    0x0f, 0x0f, 0x6d, 0xfd, 0x16, 0x16, 0x86, 0xfd, 0x21, 0x20, 0x9c, 0xfd, 0x2e, 0x2d, 0xae, 0xfd,
    0x4e, 0x55, 0xaa, 0xfe, 0xcc, 0xce, 0xda, 0xff, 0xfc, 0xfc, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf6, 0xf5, 0xf8, 0xff,
    0xf5, 0xf5, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xfb, 0xfc, 0xfc, 0xff, 0xca, 0xcc, 0xd9, 0xff, 0x4d, 0x54, 0xab, 0xfe,
    0x2e, 0x2d, 0xae, 0xfd, 0x21, 0x20, 0x9c, 0xfd, 0x16, 0x16, 0x86, 0xfd, 0x0f, 0x0f, 0x6d, 0xfd,
    0x0a, 0x0a, 0x56, 0xfd, 0xf8, 0xf2, 0xc8, 0xf9, 0x71, 0x8f, 0xb0, 0xe1, 0x37, 0x00, 0x88, 0xa1,
    0x37, 0x00, 0x88, 0xa1, 0x71, 0x8f, 0xb0, 0xe1, 0xf8, 0xf2, 0xc8, 0xf9, 0x09, 0x09, 0x55, 0xfd,
    0x0e, 0x0e, 0x68, 0xfd, 0x15, 0x15, 0x81, 0xfd, 0x1f, 0x1e, 0x99, 0xfd, 0x2a, 0x29, 0xab, 0xfd,
    0x92, 0x97, 0xb6, 0xff, 0xfb, 0xfb, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xeb, 0xec, 0xf1, 0xff,
    0xeb, 0xec, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xfb, 0xfc, 0xff, 0x93, 0x98, 0xb7, 0xff,
    0x2a, 0x29, 0xab, 0xfd, 0x1f, 0x1e, 0x99, 0xfd, 0x15, 0x15, 0x81, 0xfd, 0x0e, 0x0e, 0x68, 0xfd,
    0x09, 0x09, 0x55, 0xfd, 0xf8, 0xf2, 0xc8, 0xf9, 0x71, 0x8f, 0xb0, 0xe1, 0x37, 0x00, 0x88, 0xa1,
    0x37, 0x00, 0x88, 0xa1, 0x71, 0x8f, 0xb0, 0xe1, 0xf8, 0xf2, 0xc8, 0xf9, 0x07, 0x07, 0x54, 0xfd,
    0x0c, 0x0c, 0x62, 0xfd, 0x12, 0x12, 0x7b, 0xfd, 0x1b, 0x1a, 0x94, 0xfd, 0x26, 0x25, 0xa6, 0xfd,
    0x9f, 0xa3, 0xb8, 0xff, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe6, 0xe7, 0xed, 0xff,
    0xe7, 0xe8, 0xed, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xff, 0xa0, 0xa4, 0xbb, 0xff,
    0x26, 0x25, 0xa6, 0xfd, 0x1b, 0x1a, 0x94, 0xfd, 0x12, 0x12, 0x7b, 0xfd, 0x0c, 0x0c, 0x62, 0xfd,
    0x07, 0x07, 0x54, 0xfd, 0xf8, 0xf2, 0xc8, 0xf9, 0x71, 0x8f, 0xb0, 0xe1, 0x37, 0x00, 0x88, 0xa1,
    0x37, 0x00, 0x88, 0xa0, 0x71, 0x8f, 0xb0, 0xe0, 0xf8, 0xf2, 0xc8, 0xf9, 0x07, 0x07, 0x54, 0xfd,
    0x0a, 0x0a, 0x5e, 0xfd, 0x10, 0x10, 0x75, 0xfd, 0x17, 0x17, 0x8b, 0xfd, 0x21, 0x20, 0x9f, 0xfd,
    0x5e, 0x65, 0xa3, 0xfe, 0xd8, 0xd9, 0xe2, 0xff, 0xf7, 0xf7, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xe1, 0xe7, 0xff,
    0xe0, 0xe1, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xf6, 0xf6, 0xf8, 0xff, 0xd7, 0xd9, 0xe2, 0xff, 0x5e, 0x64, 0xa6, 0xfe,
    0x21, 0x20, 0x9f, 0xfd, 0x17, 0x17, 0x8b, 0xfd, 0x10, 0x10, 0x75, 0xfd, 0x0a, 0x0a, 0x5e, 0xfd,
    0x07, 0x07, 0x54, 0xfd, 0xf8, 0xf2, 0xc8, 0xf9, 0x71, 0x8f, 0xb0, 0xe0, 0x37, 0x00, 0x88, 0xa0,
    0x37, 0x00, 0x88, 0x99, 0x71, 0x8f, 0xb0, 0xdb, 0xf8, 0xf2, 0xc8, 0xf6, 0x06, 0x06, 0x53, 0xfc,
    0x08, 0x08, 0x55, 0xfd, 0x0d, 0x0d, 0x6a, 0xfd, 0x14, 0x14, 0x81, 0xfd, 0x1b, 0x1a, 0x95, 0xfd,
    0x24, 0x25, 0xa3, 0xfd, 0x48, 0x4e, 0xa5, 0xfe, 0x8b, 0x8f, 0xb1, 0xff, 0xf3, 0xf4, 0xf6, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbe, 0xc1, 0xcf, 0xff,
    0xc0, 0xc3, 0xd0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xf2, 0xf2, 0xf5, 0xff, 0x86, 0x8c, 0xb1, 0xff, 0x47, 0x4f, 0xa5, 0xfe, 0x24, 0x25, 0xa3, 0xfd,
    0x1b, 0x1a, 0x95, 0xfd, 0x14, 0x14, 0x81, 0xfd, 0x0d, 0x0d, 0x6a, 0xfd, 0x08, 0x08, 0x55, 0xfd,
    0x06, 0x06, 0x53, 0xfc, 0xf8, 0xf2, 0xc8, 0xf6, 0x71, 0x8f, 0xb0, 0xdb, 0x37, 0x00, 0x88, 0x99,
    0x37, 0x00, 0x88, 0x81, 0x37, 0x00, 0x88, 0xc5, 0xf8, 0xf2, 0xc7, 0xeb, 0xf8, 0xf2, 0xc8, 0xf9,
    0x07, 0x07, 0x54, 0xfc, 0x0a, 0x0a, 0x5f, 0xfd, 0x0e, 0x0e, 0x74, 0xfd, 0x15, 0x15, 0x8a, 0xfd,
    0x1d, 0x1c, 0x9b, 0xfd, 0x25, 0x24, 0xa9, 0xfd, 0x41, 0x48, 0xa6, 0xfe, 0xd3, 0xd4, 0xdd, 0xff,
    0xfd, 0xfd, 0xfe, 0xff, 0xfd, 0xfd, 0xfe, 0xff, 0xde, 0xe0, 0xe6, 0xff, 0x6c, 0x71, 0xae, 0xfe,
    0x6c, 0x73, 0xad, 0xfe, 0xdf, 0xe0, 0xe6, 0xff, 0xfd, 0xfd, 0xfe, 0xff, 0xfd, 0xfd, 0xfe, 0xff,
    0xd0, 0xd2, 0xdd, 0xff, 0x3e, 0x46, 0xa6, 0xfe, 0x25, 0x24, 0xa9, 0xfd, 0x1d, 0x1c, 0x9b, 0xfd,
    0x15, 0x15, 0x8a, 0xfd, 0x0e, 0x0e, 0x74, 0xfd, 0x0a, 0x0a, 0x5f, 0xfd, 0x07, 0x07, 0x54, 0xfc,
    0xf8, 0xf2, 0xc8, 0xf9, 0xf8, 0xf2, 0xc7, 0xeb, 0x37, 0x00, 0x88, 0xc5, 0x37, 0x00, 0x88, 0x81,
    0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x88, 0x96, 0x37, 0x00, 0x88, 0xce, 0xf8, 0xf2, 0xc7, 0xed,
    0xf8, 0xf2, 0xc8, 0xf9, 0x08, 0x08, 0x55, 0xfc, 0x0b, 0x0b, 0x67, 0xfd, 0x10, 0x10, 0x7a, 0xfd,
    0x15, 0x15, 0x8d, 0xfd, 0x1c, 0x1b, 0x9d, 0xfd, 0x23, 0x24, 0xa6, 0xfd, 0x57, 0x5d, 0xa4, 0xfe,
    0x9c, 0xa0, 0xb9, 0xff, 0x9a, 0x9e, 0xbb, 0xff, 0x5a, 0x60, 0xac, 0xfe, 0x35, 0x37, 0xbe, 0xfd,
    0x35, 0x37, 0xbe, 0xfd, 0x5c, 0x62, 0xac, 0xfe, 0x9a, 0xa0, 0xba, 0xff, 0x9a, 0x9f, 0xbb, 0xff,
    0x56, 0x5c, 0xa5, 0xfe, 0x23, 0x24, 0xa6, 0xfd, 0x1c, 0x1b, 0x9d, 0xfd, 0x15, 0x15, 0x8d, 0xfd,
    0x10, 0x10, 0x7a, 0xfd, 0x0b, 0x0b, 0x67, 0xfd, 0x08, 0x08, 0x55, 0xfc, 0xf8, 0xf2, 0xc8, 0xf9,
    0xf8, 0xf2, 0xc7, 0xed, 0x37, 0x00, 0x88, 0xce, 0x37, 0x00, 0x88, 0x96, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x88, 0x99, 0x37, 0x00, 0x88, 0xce,
    0xf8, 0xf2, 0xc7, 0xed, 0xf8, 0xf2, 0xc8, 0xf9, 0x08, 0x08, 0x57, 0xfc, 0x0b, 0x0b, 0x6b, 0xfd,
    0x10, 0x10, 0x7d, 0xfd, 0x14, 0x14, 0x8d, 0xfd, 0x19, 0x19, 0x99, 0xfd, 0x1e, 0x1d, 0xa4, 0xfd,
    0x23, 0x22, 0xac, 0xfd, 0x26, 0x25, 0xb1, 0xfd, 0x27, 0x26, 0xb4, 0xfd, 0x28, 0x27, 0xb6, 0xfd,
    0x28, 0x27, 0xb6, 0xfd, 0x27, 0x26, 0xb4, 0xfd, 0x26, 0x25, 0xb1, 0xfd, 0x23, 0x22, 0xac, 0xfd,
    0x1e, 0x1d, 0xa4, 0xfd, 0x19, 0x19, 0x99, 0xfd, 0x14, 0x14, 0x8d, 0xfd, 0x10, 0x10, 0x7d, 0xfd,
    0x0b, 0x0b, 0x6b, 0xfd, 0x08, 0x08, 0x57, 0xfc, 0xf8, 0xf2, 0xc8, 0xf9, 0xf8, 0xf2, 0xc7, 0xed,
    0x37, 0x00, 0x88, 0xce, 0x37, 0x00, 0x88, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x88, 0x99,
    0x37, 0x00, 0x88, 0xce, 0xf8, 0xf2, 0xc7, 0xed, 0xf8, 0xf2, 0xc8, 0xf9, 0x08, 0x08, 0x5a, 0xfc,
    0x0c, 0x0c, 0x6b, 0xfd, 0x0e, 0x0e, 0x7a, 0xfd, 0x12, 0x12, 0x89, 0xfd, 0x15, 0x15, 0x93, 0xfd,
    0x18, 0x18, 0x9c, 0xfd, 0x19, 0x19, 0xa1, 0xfd, 0x1b, 0x1a, 0xa6, 0xfd, 0x1d, 0x1c, 0xa8, 0xfd,
    0x1d, 0x1c, 0xa8, 0xfd, 0x1b, 0x1a, 0xa6, 0xfd, 0x19, 0x19, 0xa1, 0xfd, 0x18, 0x18, 0x9c, 0xfd,
    0x15, 0x15, 0x93, 0xfd, 0x12, 0x12, 0x89, 0xfd, 0x0e, 0x0e, 0x7a, 0xfd, 0x0c, 0x0c, 0x6b, 0xfd,
    0x08, 0x08, 0x5a, 0xfc, 0xf8, 0xf2, 0xc8, 0xf9, 0xf8, 0xf2, 0xc7, 0xed, 0x37, 0x00, 0x88, 0xce,
    0x37, 0x00, 0x88, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x37, 0x00, 0x88, 0x99, 0x37, 0x00, 0x88, 0xce, 0xf8, 0xf2, 0xc7, 0xed, 0xf8, 0xf2, 0xc8, 0xf9,
    0x07, 0x07, 0x56, 0xfc, 0x09, 0x09, 0x66, 0xfd, 0x0c, 0x0c, 0x73, 0xfd, 0x0e, 0x0e, 0x7e, 0xfd,
    0x10, 0x10, 0x88, 0xfd, 0x12, 0x12, 0x90, 0xfd, 0x12, 0x12, 0x94, 0xfd, 0x13, 0x13, 0x97, 0xfd,
    0x13, 0x13, 0x97, 0xfd, 0x12, 0x12, 0x94, 0xfd, 0x12, 0x12, 0x90, 0xfd, 0x10, 0x10, 0x88, 0xfd,
    0x0e, 0x0e, 0x7e, 0xfd, 0x0c, 0x0c, 0x73, 0xfd, 0x09, 0x09, 0x66, 0xfd, 0x07, 0x07, 0x56, 0xfc,
    0xf8, 0xf2, 0xc8, 0xf9, 0xf8, 0xf2, 0xc7, 0xed, 0x37, 0x00, 0x88, 0xce, 0x37, 0x00, 0x88, 0x99,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x88, 0x99, 0x37, 0x00, 0x88, 0xce, 0xf8, 0xf2, 0xc7, 0xed,
    0xf8, 0xf2, 0xc8, 0xf9, 0x05, 0x05, 0x53, 0xfc, 0x08, 0x08, 0x5e, 0xfd, 0x09, 0x09, 0x68, 0xfd,
    0x0a, 0x0a, 0x72, 0xfd, 0x0b, 0x0b, 0x78, 0xfd, 0x0c, 0x0c, 0x7d, 0xfd, 0x0c, 0x0c, 0x82, 0xfd,
    0x0c, 0x0c, 0x82, 0xfd, 0x0c, 0x0c, 0x7d, 0xfd, 0x0b, 0x0b, 0x78, 0xfd, 0x0a, 0x0a, 0x72, 0xfd,
    0x09, 0x09, 0x68, 0xfd, 0x08, 0x08, 0x5e, 0xfd, 0x05, 0x05, 0x53, 0xfc, 0xf8, 0xf2, 0xc8, 0xf9,
    0xf8, 0xf2, 0xc7, 0xed, 0x37, 0x00, 0x88, 0xce, 0x37, 0x00, 0x88, 0x99, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x88, 0x99, 0x37, 0x00, 0x88, 0xce,
    0xf8, 0xf2, 0xc7, 0xec, 0xf8, 0xf2, 0xc8, 0xf8, 0x05, 0x05, 0x53, 0xfc, 0x05, 0x05, 0x53, 0xfd,
    0x07, 0x07, 0x5c, 0xfd, 0x07, 0x07, 0x60, 0xfd, 0x07, 0x07, 0x65, 0xfd, 0x07, 0x07, 0x69, 0xfd,
    0x07, 0x07, 0x69, 0xfd, 0x07, 0x07, 0x65, 0xfd, 0x07, 0x07, 0x60, 0xfd, 0x07, 0x07, 0x5c, 0xfd,
    0x05, 0x05, 0x53, 0xfd, 0x05, 0x05, 0x53, 0xfc, 0xf8, 0xf2, 0xc8, 0xf8, 0xf8, 0xf2, 0xc7, 0xec,
    0x37, 0x00, 0x88, 0xce, 0x37, 0x00, 0x88, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x88, 0x99,
    0x37, 0x00, 0x88, 0xce, 0xf8, 0xf2, 0xc7, 0xeb, 0xf8, 0xf2, 0xc7, 0xf6, 0xf8, 0xf2, 0xc7, 0xf8,
    0xf8, 0xf2, 0xc7, 0xf9, 0xf8, 0xf2, 0xc7, 0xf9, 0xf8, 0xf2, 0xc7, 0xf9, 0xf8, 0xf2, 0xc7, 0xf9,
    0xf8, 0xf2, 0xc7, 0xf9, 0xf8, 0xf2, 0xc7, 0xf9, 0xf8, 0xf2, 0xc7, 0xf9, 0xf8, 0xf2, 0xc7, 0xf9,
    0xf8, 0xf2, 0xc7, 0xf8, 0xf8, 0xf2, 0xc7, 0xf6, 0xf8, 0xf2, 0xc7, 0xeb, 0x37, 0x00, 0x88, 0xce,
    0x37, 0x00, 0x88, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x37, 0x00, 0x88, 0x96, 0x37, 0x00, 0x88, 0xc6, 0x71, 0x8f, 0xb0, 0xdb, 0x71, 0x8f, 0xb0, 0xe0,
    0x71, 0x8f, 0xb0, 0xe1, 0x71, 0x8f, 0xb0, 0xe1, 0x71, 0x8f, 0xb0, 0xe1, 0x71, 0x8f, 0xb0, 0xe1,
    0x71, 0x8f, 0xb0, 0xe1, 0x71, 0x8f, 0xb0, 0xe1, 0x71, 0x8f, 0xb0, 0xe1, 0x71, 0x8f, 0xb0, 0xe1,
    0x71, 0x8f, 0xb0, 0xe0, 0x71, 0x8f, 0xb0, 0xdb, 0x37, 0x00, 0x88, 0xc6, 0x37, 0x00, 0x88, 0x96,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x88, 0x81, 0x37, 0x00, 0x88, 0x9a, 0x37, 0x00, 0x88, 0xa1,
    0x37, 0x00, 0x88, 0xa2, 0x37, 0x00, 0x88, 0xa2, 0x37, 0x00, 0x88, 0xa2, 0x37, 0x00, 0x88, 0xa2,
    0x37, 0x00, 0x88, 0xa2, 0x37, 0x00, 0x88, 0xa2, 0x37, 0x00, 0x88, 0xa2, 0x37, 0x00, 0x88, 0xa2,
    0x37, 0x00, 0x88, 0xa1, 0x37, 0x00, 0x88, 0x9a, 0x37, 0x00, 0x88, 0x81, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
];

immutable ubyte[] GOLD_SPACE_TEXTURE = [
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x91, 0x77, 0x00, 0x81, 0x91, 0x77, 0x00, 0x9a, 0x91, 0x77, 0x00, 0xa1,
    0x91, 0x77, 0x00, 0xa2, 0x91, 0x77, 0x00, 0xa2, 0x91, 0x77, 0x00, 0xa2, 0x91, 0x77, 0x00, 0xa2,
    0x91, 0x77, 0x00, 0xa2, 0x91, 0x77, 0x00, 0xa2, 0x91, 0x77, 0x00, 0xa2, 0x91, 0x77, 0x00, 0xa2,
    0x91, 0x77, 0x00, 0xa1, 0x91, 0x77, 0x00, 0x9a, 0x91, 0x77, 0x00, 0x81, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x91, 0x77, 0x00, 0x96, 0x91, 0x77, 0x00, 0xc6, 0xbb, 0x81, 0x6b, 0xdb, 0xbb, 0x81, 0x6b, 0xe0,
    0xbb, 0x81, 0x6b, 0xe1, 0xbb, 0x81, 0x6b, 0xe1, 0xbb, 0x81, 0x6b, 0xe1, 0xbb, 0x81, 0x6b, 0xe1,
    0xbb, 0x81, 0x6b, 0xe1, 0xbb, 0x81, 0x6b, 0xe1, 0xbb, 0x81, 0x6b, 0xe1, 0xbb, 0x81, 0x6b, 0xe1,
    0xbb, 0x81, 0x6b, 0xe0, 0xbb, 0x81, 0x6b, 0xdb, 0x91, 0x77, 0x00, 0xc6, 0x91, 0x77, 0x00, 0x96,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x91, 0x77, 0x00, 0x99,
    0x91, 0x77, 0x00, 0xce, 0xc2, 0xd8, 0xff, 0xeb, 0xc2, 0xd8, 0xff, 0xf6, 0xc2, 0xd8, 0xff, 0xf8,
    0xc2, 0xd8, 0xff, 0xf9, 0xc2, 0xd8, 0xff, 0xf9, 0xc2, 0xd8, 0xff, 0xf9, 0xc2, 0xd8, 0xff, 0xf9,
    0xc2, 0xd8, 0xff, 0xf9, 0xc2, 0xd8, 0xff, 0xf9, 0xc2, 0xd8, 0xff, 0xf9, 0xc2, 0xd8, 0xff, 0xf9,
    0xc2, 0xd8, 0xff, 0xf8, 0xc2, 0xd8, 0xff, 0xf6, 0xc2, 0xd8, 0xff, 0xeb, 0x91, 0x77, 0x00, 0xce,
    0x91, 0x77, 0x00, 0x99, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x91, 0x77, 0x00, 0x99, 0x91, 0x77, 0x00, 0xce,
    0xc2, 0xd8, 0xff, 0xec, 0xc3, 0xd9, 0xff, 0xf8, 0x63, 0x4a, 0x00, 0xfc, 0x63, 0x4a, 0x00, 0xfd,
    0x6d, 0x52, 0x00, 0xfd, 0x71, 0x55, 0x00, 0xfd, 0x76, 0x59, 0x00, 0xfd, 0x7a, 0x5b, 0x00, 0xfd,
    0x7a, 0x5b, 0x00, 0xfd, 0x76, 0x59, 0x00, 0xfd, 0x71, 0x55, 0x00, 0xfd, 0x6d, 0x52, 0x00, 0xfd,
    0x63, 0x4a, 0x00, 0xfd, 0x63, 0x4a, 0x00, 0xfc, 0xc3, 0xd9, 0xff, 0xf8, 0xc2, 0xd8, 0xff, 0xec,
    0x91, 0x77, 0x00, 0xce, 0x91, 0x77, 0x00, 0x99, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x91, 0x77, 0x00, 0x99, 0x91, 0x77, 0x00, 0xce, 0xc2, 0xd8, 0xff, 0xed,
    0xc3, 0xd9, 0xff, 0xf9, 0x63, 0x4a, 0x00, 0xfc, 0x70, 0x54, 0x00, 0xfd, 0x7b, 0x5c, 0x00, 0xfd,
    0x86, 0x64, 0x00, 0xfd, 0x8c, 0x69, 0x00, 0xfd, 0x92, 0x6e, 0x00, 0xfd, 0x97, 0x71, 0x00, 0xfd,
    0x97, 0x71, 0x00, 0xfd, 0x92, 0x6e, 0x00, 0xfd, 0x8c, 0x69, 0x00, 0xfd, 0x86, 0x64, 0x00, 0xfd,
    0x7b, 0x5c, 0x00, 0xfd, 0x70, 0x54, 0x00, 0xfd, 0x63, 0x4a, 0x00, 0xfc, 0xc3, 0xd9, 0xff, 0xf9,
    0xc2, 0xd8, 0xff, 0xed, 0x91, 0x77, 0x00, 0xce, 0x91, 0x77, 0x00, 0x99, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x91, 0x77, 0x00, 0x99, 0x91, 0x77, 0x00, 0xce, 0xc2, 0xd8, 0xff, 0xed, 0xc3, 0xd9, 0xff, 0xf9,
    0x67, 0x4e, 0x00, 0xfc, 0x79, 0x5b, 0x00, 0xfd, 0x89, 0x66, 0x00, 0xfd, 0x95, 0x70, 0x00, 0xfd,
    0xa1, 0x79, 0x00, 0xfd, 0xab, 0x80, 0x00, 0xfd, 0xaf, 0x83, 0x00, 0xfd, 0xb3, 0x86, 0x00, 0xfd,
    0xb3, 0x86, 0x00, 0xfd, 0xaf, 0x83, 0x00, 0xfd, 0xab, 0x80, 0x00, 0xfd, 0xa1, 0x79, 0x00, 0xfd,
    0x95, 0x70, 0x00, 0xfd, 0x89, 0x66, 0x00, 0xfd, 0x79, 0x5b, 0x00, 0xfd, 0x67, 0x4e, 0x00, 0xfc,
    0xc3, 0xd9, 0xff, 0xf9, 0xc2, 0xd8, 0xff, 0xed, 0x91, 0x77, 0x00, 0xce, 0x91, 0x77, 0x00, 0x99,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x91, 0x77, 0x00, 0x99,
    0x91, 0x77, 0x00, 0xce, 0xc2, 0xd8, 0xff, 0xed, 0xc3, 0xd9, 0xff, 0xf9, 0x6c, 0x51, 0x00, 0xfc,
    0x81, 0x61, 0x00, 0xfd, 0x91, 0x6d, 0x00, 0xfd, 0xa4, 0x7b, 0x00, 0xfd, 0xae, 0x83, 0x02, 0xfd,
    0xb8, 0x8b, 0x04, 0xfd, 0xbd, 0x8f, 0x05, 0xfd, 0xc3, 0x95, 0x05, 0xfd, 0xc5, 0x97, 0x07, 0xfd,
    0xc5, 0x97, 0x07, 0xfd, 0xc3, 0x95, 0x05, 0xfd, 0xbd, 0x8f, 0x05, 0xfd, 0xb8, 0x8b, 0x04, 0xfd,
    0xae, 0x83, 0x02, 0xfd, 0xa4, 0x7b, 0x00, 0xfd, 0x91, 0x6d, 0x00, 0xfd, 0x81, 0x61, 0x00, 0xfd,
    0x6c, 0x51, 0x00, 0xfc, 0xc3, 0xd9, 0xff, 0xf9, 0xc2, 0xd8, 0xff, 0xed, 0x91, 0x77, 0x00, 0xce,
    0x91, 0x77, 0x00, 0x99, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x91, 0x77, 0x00, 0x99, 0x91, 0x77, 0x00, 0xce,
    0xc2, 0xd8, 0xff, 0xed, 0xc3, 0xd9, 0xff, 0xf9, 0x69, 0x4f, 0x00, 0xfc, 0x80, 0x60, 0x00, 0xfd,
    0x96, 0x71, 0x00, 0xfd, 0xa8, 0x7e, 0x02, 0xfd, 0xb4, 0x89, 0x06, 0xfd, 0xc0, 0x93, 0x09, 0xfd,
    0xc8, 0x9b, 0x0e, 0xfd, 0xcd, 0x9f, 0x11, 0xfd, 0xd0, 0xa2, 0x11, 0xfd, 0xd2, 0xa3, 0x12, 0xfd,
    0xd2, 0xa3, 0x12, 0xfd, 0xd0, 0xa2, 0x11, 0xfd, 0xcd, 0x9f, 0x11, 0xfd, 0xc8, 0x9b, 0x0e, 0xfd,
    0xc0, 0x93, 0x09, 0xfd, 0xb4, 0x89, 0x06, 0xfd, 0xa8, 0x7e, 0x02, 0xfd, 0x96, 0x71, 0x00, 0xfd,
    0x80, 0x60, 0x00, 0xfd, 0x69, 0x4f, 0x00, 0xfc, 0xc3, 0xd9, 0xff, 0xf9, 0xc2, 0xd8, 0xff, 0xed,
    0x91, 0x77, 0x00, 0xce, 0x91, 0x77, 0x00, 0x99, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x91, 0x77, 0x00, 0x96, 0x91, 0x77, 0x00, 0xce, 0xc2, 0xd8, 0xff, 0xed,
    0xc3, 0xd9, 0xff, 0xf9, 0x67, 0x4e, 0x00, 0xfc, 0x7c, 0x5d, 0x00, 0xfd, 0x93, 0x6e, 0x00, 0xfd,
    0xa8, 0x7e, 0x03, 0xfd, 0xb8, 0x8e, 0x08, 0xfd, 0xc3, 0x97, 0x0e, 0xfd, 0xcc, 0xa0, 0x14, 0xfd,
    0xd3, 0xa6, 0x1b, 0xfd, 0xd8, 0xab, 0x1e, 0xfd, 0xdc, 0xae, 0x22, 0xfd, 0xdd, 0xb0, 0x22, 0xfd,
    0xdd, 0xb0, 0x22, 0xfd, 0xdc, 0xae, 0x22, 0xfd, 0xd8, 0xab, 0x1e, 0xfd, 0xd3, 0xa6, 0x1b, 0xfd,
    0xcc, 0xa0, 0x14, 0xfd, 0xc3, 0x97, 0x0e, 0xfd, 0xb8, 0x8e, 0x08, 0xfd, 0xa8, 0x7e, 0x03, 0xfd,
    0x93, 0x6e, 0x00, 0xfd, 0x7c, 0x5d, 0x00, 0xfd, 0x67, 0x4e, 0x00, 0xfc, 0xc3, 0xd9, 0xff, 0xf9,
    0xc2, 0xd8, 0xff, 0xed, 0x91, 0x77, 0x00, 0xce, 0x91, 0x77, 0x00, 0x96, 0x06, 0x06, 0x06, 0x00,
    0x91, 0x77, 0x00, 0x81, 0x91, 0x77, 0x00, 0xc5, 0xc2, 0xd8, 0xff, 0xeb, 0xc3, 0xd9, 0xff, 0xf9,
    0x65, 0x4c, 0x00, 0xfc, 0x73, 0x56, 0x00, 0xfd, 0x8c, 0x69, 0x00, 0xfd, 0xa4, 0x7c, 0x04, 0xfd,
    0xb6, 0x8c, 0x09, 0xfd, 0xc4, 0x98, 0x11, 0xfd, 0xd0, 0xa4, 0x1b, 0xfd, 0xd7, 0xab, 0x23, 0xfd,
    0xd9, 0xb0, 0x2e, 0xfd, 0xdd, 0xb4, 0x35, 0xfd, 0xde, 0xb6, 0x38, 0xfd, 0xe1, 0xb8, 0x39, 0xfd,
    0xe1, 0xb8, 0x39, 0xfd, 0xde, 0xb6, 0x38, 0xfd, 0xdd, 0xb4, 0x35, 0xfd, 0xd9, 0xb0, 0x2e, 0xfd,
    0xd7, 0xab, 0x23, 0xfd, 0xd0, 0xa4, 0x1b, 0xfd, 0xc4, 0x98, 0x11, 0xfd, 0xb6, 0x8c, 0x09, 0xfd,
    0xa4, 0x7c, 0x04, 0xfd, 0x8c, 0x69, 0x00, 0xfd, 0x73, 0x56, 0x00, 0xfd, 0x65, 0x4c, 0x00, 0xfc,
    0xc3, 0xd9, 0xff, 0xf9, 0xc2, 0xd8, 0xff, 0xeb, 0x91, 0x77, 0x00, 0xc5, 0x91, 0x77, 0x00, 0x81,
    0x91, 0x77, 0x00, 0x99, 0xbb, 0x81, 0x6b, 0xdb, 0xc3, 0xd9, 0xff, 0xf6, 0x64, 0x4b, 0x00, 0xfc,
    0x67, 0x4e, 0x00, 0xfd, 0x81, 0x61, 0x00, 0xfd, 0x9a, 0x75, 0x04, 0xfd, 0xaf, 0x87, 0x08, 0xfd,
    0xc1, 0x96, 0x10, 0xfd, 0xcd, 0xa2, 0x1a, 0xfd, 0xd7, 0xad, 0x27, 0xfd, 0xda, 0xb3, 0x37, 0xfd,
    0xdf, 0xb9, 0x3f, 0xfd, 0xe3, 0xbf, 0x47, 0xfd, 0xe6, 0xc7, 0x4f, 0xfd, 0xe6, 0xc8, 0x54, 0xfd,
    0xe6, 0xc8, 0x54, 0xfd, 0xe6, 0xc7, 0x4f, 0xfd, 0xe3, 0xbf, 0x47, 0xfd, 0xdf, 0xb9, 0x3f, 0xfd,
    0xda, 0xb3, 0x37, 0xfd, 0xd7, 0xad, 0x27, 0xfd, 0xcd, 0xa2, 0x1a, 0xfd, 0xc1, 0x96, 0x10, 0xfd,
    0xaf, 0x87, 0x08, 0xfd, 0x9a, 0x75, 0x04, 0xfd, 0x81, 0x61, 0x00, 0xfd, 0x67, 0x4e, 0x00, 0xfd,
    0x64, 0x4b, 0x00, 0xfc, 0xc3, 0xd9, 0xff, 0xf6, 0xbb, 0x81, 0x6b, 0xdb, 0x91, 0x77, 0x00, 0x99,
    0x91, 0x77, 0x00, 0xa0, 0xbb, 0x81, 0x6b, 0xe0, 0xc3, 0xd9, 0xff, 0xf9, 0x65, 0x4c, 0x00, 0xfd,
    0x72, 0x56, 0x00, 0xfd, 0x8e, 0x6a, 0x01, 0xfd, 0xa5, 0x7d, 0x06, 0xfd, 0xb9, 0x90, 0x0d, 0xfd,
    0xc9, 0x9e, 0x18, 0xfd, 0xd4, 0xaa, 0x25, 0xfd, 0xda, 0xb3, 0x38, 0xfd, 0xe0, 0xbc, 0x45, 0xfd,
    0xe5, 0xc5, 0x52, 0xfd, 0xe8, 0xce, 0x64, 0xfd, 0xea, 0xd2, 0x70, 0xfd, 0xea, 0xd4, 0x76, 0xfd,
    0xea, 0xd4, 0x76, 0xfd, 0xea, 0xd2, 0x70, 0xfd, 0xe8, 0xce, 0x64, 0xfd, 0xe5, 0xc5, 0x52, 0xfd,
    0xe0, 0xbc, 0x45, 0xfd, 0xda, 0xb3, 0x38, 0xfd, 0xd4, 0xaa, 0x25, 0xfd, 0xc9, 0x9e, 0x18, 0xfd,
    0xb9, 0x90, 0x0d, 0xfd, 0xa5, 0x7d, 0x06, 0xfd, 0x8e, 0x6a, 0x01, 0xfd, 0x72, 0x56, 0x00, 0xfd,
    0x65, 0x4c, 0x00, 0xfd, 0xc3, 0xd9, 0xff, 0xf9, 0xbb, 0x81, 0x6b, 0xe0, 0x91, 0x77, 0x00, 0xa0,
    0x91, 0x77, 0x00, 0xa1, 0xbb, 0x81, 0x6b, 0xe1, 0xc3, 0xd9, 0xff, 0xf9, 0x65, 0x4c, 0x00, 0xfd,
    0x78, 0x5a, 0x00, 0xfd, 0x94, 0x6f, 0x02, 0xfd, 0xae, 0x86, 0x08, 0xfd, 0xc0, 0x96, 0x12, 0xfd,
    0xcf, 0xa4, 0x1f, 0xfd, 0xd6, 0xaf, 0x34, 0xfd, 0xde, 0xba, 0x44, 0xfd, 0xe5, 0xc3, 0x54, 0xfd,
    0xe9, 0xd0, 0x6a, 0xfd, 0xeb, 0xd7, 0x80, 0xfd, 0xed, 0xda, 0x8b, 0xfd, 0xed, 0xdb, 0x91, 0xfd,
    0xed, 0xdb, 0x91, 0xfd, 0xed, 0xda, 0x8b, 0xfd, 0xeb, 0xd7, 0x80, 0xfd, 0xe9, 0xd0, 0x6a, 0xfd,
    0xe5, 0xc3, 0x54, 0xfd, 0xde, 0xba, 0x44, 0xfd, 0xd6, 0xaf, 0x34, 0xfd, 0xcf, 0xa4, 0x1f, 0xfd,
    0xc0, 0x96, 0x12, 0xfd, 0xae, 0x86, 0x08, 0xfd, 0x94, 0x6f, 0x02, 0xfd, 0x78, 0x5a, 0x00, 0xfd,
    0x65, 0x4c, 0x00, 0xfd, 0xc3, 0xd9, 0xff, 0xf9, 0xbb, 0x81, 0x6b, 0xe1, 0x91, 0x77, 0x00, 0xa1,
    0x91, 0x77, 0x00, 0xa1, 0xbb, 0x81, 0x6b, 0xe1, 0xc3, 0xd9, 0xff, 0xf9, 0x68, 0x4e, 0x00, 0xfd,
    0x7f, 0x60, 0x01, 0xfd, 0x9a, 0x75, 0x05, 0xfd, 0xb3, 0x8b, 0x0c, 0xfd, 0xc5, 0x9b, 0x16, 0xfd,
    0xd3, 0xa9, 0x27, 0xfd, 0xda, 0xb3, 0x3b, 0xfd, 0xe1, 0xbf, 0x4e, 0xfd, 0xe7, 0xcd, 0x63, 0xfd,
    0xeb, 0xd7, 0x80, 0xfd, 0xed, 0xdc, 0x93, 0xfd, 0xef, 0xe0, 0xa0, 0xfd, 0xef, 0xe2, 0xa4, 0xfd,
    0xef, 0xe2, 0xa4, 0xfd, 0xef, 0xe0, 0xa0, 0xfd, 0xed, 0xdc, 0x93, 0xfd, 0xeb, 0xd7, 0x80, 0xfd,
    0xe7, 0xcd, 0x63, 0xfd, 0xe1, 0xbf, 0x4e, 0xfd, 0xda, 0xb3, 0x3b, 0xfd, 0xd3, 0xa9, 0x27, 0xfd,
    0xc5, 0x9b, 0x16, 0xfd, 0xb3, 0x8b, 0x0c, 0xfd, 0x9a, 0x75, 0x05, 0xfd, 0x7f, 0x60, 0x01, 0xfd,
    0x68, 0x4e, 0x00, 0xfd, 0xc3, 0xd9, 0xff, 0xf9, 0xbb, 0x81, 0x6b, 0xe1, 0x91, 0x77, 0x00, 0xa1,
    0x91, 0x77, 0x00, 0xa1, 0xbb, 0x81, 0x6b, 0xe1, 0xc3, 0xd9, 0xff, 0xf9, 0x6a, 0x50, 0x00, 0xfd,
    0x85, 0x64, 0x01, 0xfd, 0x9f, 0x79, 0x05, 0xfd, 0xb6, 0x8d, 0x0e, 0xfd, 0xc8, 0x9e, 0x1b, 0xfd,
    0xd4, 0xab, 0x2b, 0xfd, 0xdc, 0xb8, 0x42, 0xfd, 0xe4, 0xc3, 0x56, 0xfd, 0xe9, 0xd1, 0x6f, 0xfd,
    0xec, 0xda, 0x8c, 0xfd, 0xef, 0xe0, 0xa0, 0xfd, 0xf0, 0xe5, 0xad, 0xfd, 0xf1, 0xe6, 0xb1, 0xfd,
    0xf1, 0xe6, 0xb1, 0xfd, 0xf0, 0xe5, 0xad, 0xfd, 0xef, 0xe0, 0xa0, 0xfd, 0xec, 0xda, 0x8c, 0xfd,
    0xe9, 0xd1, 0x6f, 0xfd, 0xe4, 0xc3, 0x56, 0xfd, 0xdc, 0xb8, 0x42, 0xfd, 0xd4, 0xab, 0x2b, 0xfd,
    0xc8, 0x9e, 0x1b, 0xfd, 0xb6, 0x8d, 0x0e, 0xfd, 0x9f, 0x79, 0x05, 0xfd, 0x85, 0x64, 0x01, 0xfd,
    0x6a, 0x50, 0x00, 0xfd, 0xc3, 0xd9, 0xff, 0xf9, 0xbb, 0x81, 0x6b, 0xe1, 0x91, 0x77, 0x00, 0xa1,
    0x91, 0x77, 0x00, 0xa1, 0xbb, 0x81, 0x6b, 0xe1, 0xc3, 0xd9, 0xff, 0xf9, 0x6a, 0x50, 0x00, 0xfd,
    0x87, 0x65, 0x01, 0xfd, 0xa0, 0x7a, 0x07, 0xfd, 0xb7, 0x8e, 0x0f, 0xfd, 0xca, 0xa0, 0x1b, 0xfd,
    0xd3, 0xac, 0x30, 0xfd, 0xdd, 0xb9, 0x44, 0xfd, 0xe4, 0xc4, 0x59, 0xfd, 0xea, 0xd2, 0x74, 0xfd,
    0xec, 0xdc, 0x91, 0xfd, 0xef, 0xe3, 0xa6, 0xfd, 0xf1, 0xe7, 0xb1, 0xfd, 0xf1, 0xe8, 0xb7, 0xfd,
    0xf1, 0xe8, 0xb7, 0xfd, 0xf1, 0xe7, 0xb1, 0xfd, 0xef, 0xe3, 0xa6, 0xfd, 0xec, 0xdc, 0x91, 0xfd,
    0xea, 0xd2, 0x74, 0xfd, 0xe4, 0xc4, 0x59, 0xfd, 0xdd, 0xb9, 0x44, 0xfd, 0xd3, 0xac, 0x30, 0xfd,
    0xca, 0xa0, 0x1b, 0xfd, 0xb7, 0x8e, 0x0f, 0xfd, 0xa0, 0x7a, 0x07, 0xfd, 0x87, 0x65, 0x01, 0xfd,
    0x6a, 0x50, 0x00, 0xfd, 0xc3, 0xd9, 0xff, 0xf9, 0xbb, 0x81, 0x6b, 0xe1, 0x91, 0x77, 0x00, 0xa1,
    0x91, 0x77, 0x00, 0xa1, 0xbb, 0x81, 0x6b, 0xe1, 0xc3, 0xd9, 0xff, 0xf9, 0x6a, 0x50, 0x00, 0xfd,
    0x87, 0x65, 0x01, 0xfd, 0xa0, 0x7a, 0x07, 0xfd, 0xb7, 0x8e, 0x0f, 0xfd, 0xca, 0xa0, 0x1b, 0xfd,
    0xd3, 0xac, 0x30, 0xfd, 0xdd, 0xb9, 0x44, 0xfd, 0xe4, 0xc4, 0x59, 0xfd, 0xea, 0xd2, 0x74, 0xfd,
    0xec, 0xdc, 0x91, 0xfd, 0xef, 0xe3, 0xa6, 0xfd, 0xf1, 0xe7, 0xb1, 0xfd, 0xf1, 0xe8, 0xb7, 0xfd,
    0xf1, 0xe8, 0xb7, 0xfd, 0xf1, 0xe7, 0xb1, 0xfd, 0xef, 0xe3, 0xa6, 0xfd, 0xec, 0xdc, 0x91, 0xfd,
    0xea, 0xd2, 0x74, 0xfd, 0xe4, 0xc4, 0x59, 0xfd, 0xdd, 0xb9, 0x44, 0xfd, 0xd3, 0xac, 0x30, 0xfd,
    0xca, 0xa0, 0x1b, 0xfd, 0xb7, 0x8e, 0x0f, 0xfd, 0xa0, 0x7a, 0x07, 0xfd, 0x87, 0x65, 0x01, 0xfd,
    0x6a, 0x50, 0x00, 0xfd, 0xc3, 0xd9, 0xff, 0xf9, 0xbb, 0x81, 0x6b, 0xe1, 0x91, 0x77, 0x00, 0xa1,
    0x91, 0x77, 0x00, 0xa1, 0xbb, 0x81, 0x6b, 0xe1, 0xc3, 0xd9, 0xff, 0xf9, 0x6a, 0x50, 0x00, 0xfd,
    0x85, 0x64, 0x01, 0xfd, 0x9f, 0x79, 0x05, 0xfd, 0xb6, 0x8d, 0x0e, 0xfd, 0xc8, 0x9e, 0x1b, 0xfd,
    0xd4, 0xab, 0x2b, 0xfd, 0xdc, 0xb8, 0x42, 0xfd, 0xe4, 0xc3, 0x56, 0xfd, 0xe9, 0xd1, 0x6f, 0xfd,
    0xec, 0xda, 0x8c, 0xfd, 0xef, 0xe0, 0xa0, 0xfd, 0xf0, 0xe5, 0xad, 0xfd, 0xf1, 0xe6, 0xb1, 0xfd,
    0xf1, 0xe6, 0xb1, 0xfd, 0xf0, 0xe5, 0xad, 0xfd, 0xef, 0xe0, 0xa0, 0xfd, 0xec, 0xda, 0x8c, 0xfd,
    0xe9, 0xd1, 0x6f, 0xfd, 0xe4, 0xc3, 0x56, 0xfd, 0xdc, 0xb8, 0x42, 0xfd, 0xd4, 0xab, 0x2b, 0xfd,
    0xc8, 0x9e, 0x1b, 0xfd, 0xb6, 0x8d, 0x0e, 0xfd, 0x9f, 0x79, 0x05, 0xfd, 0x85, 0x64, 0x01, 0xfd,
    0x6a, 0x50, 0x00, 0xfd, 0xc3, 0xd9, 0xff, 0xf9, 0xbb, 0x81, 0x6b, 0xe1, 0x91, 0x77, 0x00, 0xa1,
    0x91, 0x77, 0x00, 0xa1, 0xbb, 0x81, 0x6b, 0xe1, 0xc3, 0xd9, 0xff, 0xf9, 0x68, 0x4e, 0x00, 0xfd,
    0x7f, 0x60, 0x01, 0xfd, 0x9a, 0x75, 0x05, 0xfd, 0xb3, 0x8b, 0x0c, 0xfd, 0xc5, 0x9b, 0x16, 0xfd,
    0xd3, 0xa9, 0x27, 0xfd, 0xda, 0xb3, 0x3b, 0xfd, 0xe1, 0xbf, 0x4e, 0xfd, 0xe7, 0xcd, 0x63, 0xfd,
    0xeb, 0xd7, 0x80, 0xfd, 0xed, 0xdc, 0x93, 0xfd, 0xef, 0xe0, 0xa0, 0xfd, 0xef, 0xe2, 0xa4, 0xfd,
    0xef, 0xe2, 0xa4, 0xfd, 0xef, 0xe0, 0xa0, 0xfd, 0xed, 0xdc, 0x93, 0xfd, 0xeb, 0xd7, 0x80, 0xfd,
    0xe7, 0xcd, 0x63, 0xfd, 0xe1, 0xbf, 0x4e, 0xfd, 0xda, 0xb3, 0x3b, 0xfd, 0xd3, 0xa9, 0x27, 0xfd,
    0xc5, 0x9b, 0x16, 0xfd, 0xb3, 0x8b, 0x0c, 0xfd, 0x9a, 0x75, 0x05, 0xfd, 0x7f, 0x60, 0x01, 0xfd,
    0x68, 0x4e, 0x00, 0xfd, 0xc3, 0xd9, 0xff, 0xf9, 0xbb, 0x81, 0x6b, 0xe1, 0x91, 0x77, 0x00, 0xa1,
    0x91, 0x77, 0x00, 0xa1, 0xbb, 0x81, 0x6b, 0xe1, 0xc3, 0xd9, 0xff, 0xf9, 0x65, 0x4c, 0x00, 0xfd,
    0x78, 0x5a, 0x00, 0xfd, 0x94, 0x6f, 0x02, 0xfd, 0xae, 0x86, 0x08, 0xfd, 0xc0, 0x96, 0x12, 0xfd,
    0xcf, 0xa4, 0x1f, 0xfd, 0xd6, 0xaf, 0x34, 0xfd, 0xde, 0xba, 0x44, 0xfd, 0xe5, 0xc3, 0x54, 0xfd,
    0xe9, 0xd0, 0x6a, 0xfd, 0xeb, 0xd7, 0x80, 0xfd, 0xed, 0xda, 0x8b, 0xfd, 0xed, 0xdb, 0x91, 0xfd,
    0xed, 0xdb, 0x91, 0xfd, 0xed, 0xda, 0x8b, 0xfd, 0xeb, 0xd7, 0x80, 0xfd, 0xe9, 0xd0, 0x6a, 0xfd,
    0xe5, 0xc3, 0x54, 0xfd, 0xde, 0xba, 0x44, 0xfd, 0xd6, 0xaf, 0x34, 0xfd, 0xcf, 0xa4, 0x1f, 0xfd,
    0xc0, 0x96, 0x12, 0xfd, 0xae, 0x86, 0x08, 0xfd, 0x94, 0x6f, 0x02, 0xfd, 0x78, 0x5a, 0x00, 0xfd,
    0x65, 0x4c, 0x00, 0xfd, 0xc3, 0xd9, 0xff, 0xf9, 0xbb, 0x81, 0x6b, 0xe1, 0x91, 0x77, 0x00, 0xa1,
    0x91, 0x77, 0x00, 0xa0, 0xbb, 0x81, 0x6b, 0xe0, 0xc3, 0xd9, 0xff, 0xf9, 0x65, 0x4c, 0x00, 0xfd,
    0x72, 0x56, 0x00, 0xfd, 0x8e, 0x6a, 0x01, 0xfd, 0xa5, 0x7d, 0x06, 0xfd, 0xb9, 0x90, 0x0d, 0xfd,
    0xc9, 0x9e, 0x18, 0xfd, 0xd4, 0xaa, 0x25, 0xfd, 0xda, 0xb3, 0x38, 0xfd, 0xe0, 0xbc, 0x45, 0xfd,
    0xe5, 0xc5, 0x52, 0xfd, 0xe8, 0xce, 0x64, 0xfd, 0xea, 0xd2, 0x70, 0xfd, 0xea, 0xd4, 0x76, 0xfd,
    0xea, 0xd4, 0x76, 0xfd, 0xea, 0xd2, 0x70, 0xfd, 0xe8, 0xce, 0x64, 0xfd, 0xe5, 0xc5, 0x52, 0xfd,
    0xe0, 0xbc, 0x45, 0xfd, 0xda, 0xb3, 0x38, 0xfd, 0xd4, 0xaa, 0x25, 0xfd, 0xc9, 0x9e, 0x18, 0xfd,
    0xb9, 0x90, 0x0d, 0xfd, 0xa5, 0x7d, 0x06, 0xfd, 0x8e, 0x6a, 0x01, 0xfd, 0x72, 0x56, 0x00, 0xfd,
    0x65, 0x4c, 0x00, 0xfd, 0xc3, 0xd9, 0xff, 0xf9, 0xbb, 0x81, 0x6b, 0xe0, 0x91, 0x77, 0x00, 0xa0,
    0x91, 0x77, 0x00, 0x99, 0xbb, 0x81, 0x6b, 0xdb, 0xc3, 0xd9, 0xff, 0xf6, 0x64, 0x4b, 0x00, 0xfc,
    0x67, 0x4e, 0x00, 0xfd, 0x81, 0x61, 0x00, 0xfd, 0x9a, 0x75, 0x04, 0xfd, 0xaf, 0x87, 0x08, 0xfd,
    0xc1, 0x96, 0x10, 0xfd, 0xcd, 0xa2, 0x1a, 0xfd, 0xd7, 0xad, 0x27, 0xfd, 0xda, 0xb3, 0x37, 0xfd,
    0xdf, 0xb9, 0x3f, 0xfd, 0xe3, 0xbf, 0x47, 0xfd, 0xe6, 0xc7, 0x4f, 0xfd, 0xe6, 0xc8, 0x54, 0xfd,
    0xe6, 0xc8, 0x54, 0xfd, 0xe6, 0xc7, 0x4f, 0xfd, 0xe3, 0xbf, 0x47, 0xfd, 0xdf, 0xb9, 0x3f, 0xfd,
    0xda, 0xb3, 0x37, 0xfd, 0xd7, 0xad, 0x27, 0xfd, 0xcd, 0xa2, 0x1a, 0xfd, 0xc1, 0x96, 0x10, 0xfd,
    0xaf, 0x87, 0x08, 0xfd, 0x9a, 0x75, 0x04, 0xfd, 0x81, 0x61, 0x00, 0xfd, 0x67, 0x4e, 0x00, 0xfd,
    0x64, 0x4b, 0x00, 0xfc, 0xc3, 0xd9, 0xff, 0xf6, 0xbb, 0x81, 0x6b, 0xdb, 0x91, 0x77, 0x00, 0x99,
    0x91, 0x77, 0x00, 0x81, 0x91, 0x77, 0x00, 0xc5, 0xc2, 0xd8, 0xff, 0xeb, 0xc3, 0xd9, 0xff, 0xf9,
    0x65, 0x4c, 0x00, 0xfc, 0x73, 0x56, 0x00, 0xfd, 0x8c, 0x69, 0x00, 0xfd, 0xa4, 0x7c, 0x04, 0xfd,
    0xb6, 0x8c, 0x09, 0xfd, 0xc4, 0x98, 0x11, 0xfd, 0xd0, 0xa4, 0x1b, 0xfd, 0xd7, 0xab, 0x23, 0xfd,
    0xd9, 0xb0, 0x2e, 0xfd, 0xdd, 0xb4, 0x35, 0xfd, 0xde, 0xb6, 0x38, 0xfd, 0xe1, 0xb8, 0x39, 0xfd,
    0xe1, 0xb8, 0x39, 0xfd, 0xde, 0xb6, 0x38, 0xfd, 0xdd, 0xb4, 0x35, 0xfd, 0xd9, 0xb0, 0x2e, 0xfd,
    0xd7, 0xab, 0x23, 0xfd, 0xd0, 0xa4, 0x1b, 0xfd, 0xc4, 0x98, 0x11, 0xfd, 0xb6, 0x8c, 0x09, 0xfd,
    0xa4, 0x7c, 0x04, 0xfd, 0x8c, 0x69, 0x00, 0xfd, 0x73, 0x56, 0x00, 0xfd, 0x65, 0x4c, 0x00, 0xfc,
    0xc3, 0xd9, 0xff, 0xf9, 0xc2, 0xd8, 0xff, 0xeb, 0x91, 0x77, 0x00, 0xc5, 0x91, 0x77, 0x00, 0x81,
    0x06, 0x06, 0x06, 0x00, 0x91, 0x77, 0x00, 0x96, 0x91, 0x77, 0x00, 0xce, 0xc2, 0xd8, 0xff, 0xed,
    0xc3, 0xd9, 0xff, 0xf9, 0x67, 0x4e, 0x00, 0xfc, 0x7c, 0x5d, 0x00, 0xfd, 0x93, 0x6e, 0x00, 0xfd,
    0xa8, 0x7e, 0x03, 0xfd, 0xb8, 0x8e, 0x08, 0xfd, 0xc3, 0x97, 0x0e, 0xfd, 0xcc, 0xa0, 0x14, 0xfd,
    0xd3, 0xa6, 0x1b, 0xfd, 0xd8, 0xab, 0x1e, 0xfd, 0xdc, 0xae, 0x22, 0xfd, 0xdd, 0xb0, 0x22, 0xfd,
    0xdd, 0xb0, 0x22, 0xfd, 0xdc, 0xae, 0x22, 0xfd, 0xd8, 0xab, 0x1e, 0xfd, 0xd3, 0xa6, 0x1b, 0xfd,
    0xcc, 0xa0, 0x14, 0xfd, 0xc3, 0x97, 0x0e, 0xfd, 0xb8, 0x8e, 0x08, 0xfd, 0xa8, 0x7e, 0x03, 0xfd,
    0x93, 0x6e, 0x00, 0xfd, 0x7c, 0x5d, 0x00, 0xfd, 0x67, 0x4e, 0x00, 0xfc, 0xc3, 0xd9, 0xff, 0xf9,
    0xc2, 0xd8, 0xff, 0xed, 0x91, 0x77, 0x00, 0xce, 0x91, 0x77, 0x00, 0x96, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x91, 0x77, 0x00, 0x99, 0x91, 0x77, 0x00, 0xce,
    0xc2, 0xd8, 0xff, 0xed, 0xc3, 0xd9, 0xff, 0xf9, 0x69, 0x4f, 0x00, 0xfc, 0x80, 0x60, 0x00, 0xfd,
    0x96, 0x71, 0x00, 0xfd, 0xa8, 0x7e, 0x02, 0xfd, 0xb4, 0x89, 0x06, 0xfd, 0xc0, 0x93, 0x09, 0xfd,
    0xc8, 0x9b, 0x0e, 0xfd, 0xcd, 0x9f, 0x11, 0xfd, 0xd0, 0xa2, 0x11, 0xfd, 0xd2, 0xa3, 0x12, 0xfd,
    0xd2, 0xa3, 0x12, 0xfd, 0xd0, 0xa2, 0x11, 0xfd, 0xcd, 0x9f, 0x11, 0xfd, 0xc8, 0x9b, 0x0e, 0xfd,
    0xc0, 0x93, 0x09, 0xfd, 0xb4, 0x89, 0x06, 0xfd, 0xa8, 0x7e, 0x02, 0xfd, 0x96, 0x71, 0x00, 0xfd,
    0x80, 0x60, 0x00, 0xfd, 0x69, 0x4f, 0x00, 0xfc, 0xc3, 0xd9, 0xff, 0xf9, 0xc2, 0xd8, 0xff, 0xed,
    0x91, 0x77, 0x00, 0xce, 0x91, 0x77, 0x00, 0x99, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x91, 0x77, 0x00, 0x99,
    0x91, 0x77, 0x00, 0xce, 0xc2, 0xd8, 0xff, 0xed, 0xc3, 0xd9, 0xff, 0xf9, 0x6c, 0x51, 0x00, 0xfc,
    0x81, 0x61, 0x00, 0xfd, 0x91, 0x6d, 0x00, 0xfd, 0xa4, 0x7b, 0x00, 0xfd, 0xae, 0x83, 0x02, 0xfd,
    0xb8, 0x8b, 0x04, 0xfd, 0xbd, 0x8f, 0x05, 0xfd, 0xc3, 0x95, 0x05, 0xfd, 0xc5, 0x97, 0x07, 0xfd,
    0xc5, 0x97, 0x07, 0xfd, 0xc3, 0x95, 0x05, 0xfd, 0xbd, 0x8f, 0x05, 0xfd, 0xb8, 0x8b, 0x04, 0xfd,
    0xae, 0x83, 0x02, 0xfd, 0xa4, 0x7b, 0x00, 0xfd, 0x91, 0x6d, 0x00, 0xfd, 0x81, 0x61, 0x00, 0xfd,
    0x6c, 0x51, 0x00, 0xfc, 0xc3, 0xd9, 0xff, 0xf9, 0xc2, 0xd8, 0xff, 0xed, 0x91, 0x77, 0x00, 0xce,
    0x91, 0x77, 0x00, 0x99, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x91, 0x77, 0x00, 0x99, 0x91, 0x77, 0x00, 0xce, 0xc2, 0xd8, 0xff, 0xed, 0xc3, 0xd9, 0xff, 0xf9,
    0x67, 0x4e, 0x00, 0xfc, 0x79, 0x5b, 0x00, 0xfd, 0x89, 0x66, 0x00, 0xfd, 0x95, 0x70, 0x00, 0xfd,
    0xa1, 0x79, 0x00, 0xfd, 0xab, 0x80, 0x00, 0xfd, 0xaf, 0x83, 0x00, 0xfd, 0xb3, 0x86, 0x00, 0xfd,
    0xb3, 0x86, 0x00, 0xfd, 0xaf, 0x83, 0x00, 0xfd, 0xab, 0x80, 0x00, 0xfd, 0xa1, 0x79, 0x00, 0xfd,
    0x95, 0x70, 0x00, 0xfd, 0x89, 0x66, 0x00, 0xfd, 0x79, 0x5b, 0x00, 0xfd, 0x67, 0x4e, 0x00, 0xfc,
    0xc3, 0xd9, 0xff, 0xf9, 0xc2, 0xd8, 0xff, 0xed, 0x91, 0x77, 0x00, 0xce, 0x91, 0x77, 0x00, 0x99,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x91, 0x77, 0x00, 0x99, 0x91, 0x77, 0x00, 0xce, 0xc2, 0xd8, 0xff, 0xed,
    0xc3, 0xd9, 0xff, 0xf9, 0x63, 0x4a, 0x00, 0xfc, 0x70, 0x54, 0x00, 0xfd, 0x7b, 0x5c, 0x00, 0xfd,
    0x86, 0x64, 0x00, 0xfd, 0x8c, 0x69, 0x00, 0xfd, 0x92, 0x6e, 0x00, 0xfd, 0x97, 0x71, 0x00, 0xfd,
    0x97, 0x71, 0x00, 0xfd, 0x92, 0x6e, 0x00, 0xfd, 0x8c, 0x69, 0x00, 0xfd, 0x86, 0x64, 0x00, 0xfd,
    0x7b, 0x5c, 0x00, 0xfd, 0x70, 0x54, 0x00, 0xfd, 0x63, 0x4a, 0x00, 0xfc, 0xc3, 0xd9, 0xff, 0xf9,
    0xc2, 0xd8, 0xff, 0xed, 0x91, 0x77, 0x00, 0xce, 0x91, 0x77, 0x00, 0x99, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x91, 0x77, 0x00, 0x99, 0x91, 0x77, 0x00, 0xce,
    0xc2, 0xd8, 0xff, 0xec, 0xc3, 0xd9, 0xff, 0xf8, 0x63, 0x4a, 0x00, 0xfc, 0x63, 0x4a, 0x00, 0xfd,
    0x6d, 0x52, 0x00, 0xfd, 0x71, 0x55, 0x00, 0xfd, 0x76, 0x59, 0x00, 0xfd, 0x7a, 0x5b, 0x00, 0xfd,
    0x7a, 0x5b, 0x00, 0xfd, 0x76, 0x59, 0x00, 0xfd, 0x71, 0x55, 0x00, 0xfd, 0x6d, 0x52, 0x00, 0xfd,
    0x63, 0x4a, 0x00, 0xfd, 0x63, 0x4a, 0x00, 0xfc, 0xc3, 0xd9, 0xff, 0xf8, 0xc2, 0xd8, 0xff, 0xec,
    0x91, 0x77, 0x00, 0xce, 0x91, 0x77, 0x00, 0x99, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x91, 0x77, 0x00, 0x99,
    0x91, 0x77, 0x00, 0xce, 0xc2, 0xd8, 0xff, 0xeb, 0xc2, 0xd8, 0xff, 0xf6, 0xc2, 0xd8, 0xff, 0xf8,
    0xc2, 0xd8, 0xff, 0xf9, 0xc2, 0xd8, 0xff, 0xf9, 0xc2, 0xd8, 0xff, 0xf9, 0xc2, 0xd8, 0xff, 0xf9,
    0xc2, 0xd8, 0xff, 0xf9, 0xc2, 0xd8, 0xff, 0xf9, 0xc2, 0xd8, 0xff, 0xf9, 0xc2, 0xd8, 0xff, 0xf9,
    0xc2, 0xd8, 0xff, 0xf8, 0xc2, 0xd8, 0xff, 0xf6, 0xc2, 0xd8, 0xff, 0xeb, 0x91, 0x77, 0x00, 0xce,
    0x91, 0x77, 0x00, 0x99, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x91, 0x77, 0x00, 0x96, 0x91, 0x77, 0x00, 0xc6, 0xbb, 0x81, 0x6b, 0xdb, 0xbb, 0x81, 0x6b, 0xe0,
    0xbb, 0x81, 0x6b, 0xe1, 0xbb, 0x81, 0x6b, 0xe1, 0xbb, 0x81, 0x6b, 0xe1, 0xbb, 0x81, 0x6b, 0xe1,
    0xbb, 0x81, 0x6b, 0xe1, 0xbb, 0x81, 0x6b, 0xe1, 0xbb, 0x81, 0x6b, 0xe1, 0xbb, 0x81, 0x6b, 0xe1,
    0xbb, 0x81, 0x6b, 0xe0, 0xbb, 0x81, 0x6b, 0xdb, 0x91, 0x77, 0x00, 0xc6, 0x91, 0x77, 0x00, 0x96,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x91, 0x77, 0x00, 0x81, 0x91, 0x77, 0x00, 0x9a, 0x91, 0x77, 0x00, 0xa1,
    0x91, 0x77, 0x00, 0xa2, 0x91, 0x77, 0x00, 0xa2, 0x91, 0x77, 0x00, 0xa2, 0x91, 0x77, 0x00, 0xa2,
    0x91, 0x77, 0x00, 0xa2, 0x91, 0x77, 0x00, 0xa2, 0x91, 0x77, 0x00, 0xa2, 0x91, 0x77, 0x00, 0xa2,
    0x91, 0x77, 0x00, 0xa1, 0x91, 0x77, 0x00, 0x9a, 0x91, 0x77, 0x00, 0x81, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00,
    0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x00
];
